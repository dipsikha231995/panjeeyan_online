/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface OffDaysDao
{
	/** 
	 * Inserts a new row in the off_days table.
	 */
	public OffDaysPk insert(OffDays dto) throws OffDaysDaoException;

	/** 
	 * Updates a single row in the off_days table.
	 */
	public void update(OffDaysPk pk, OffDays dto) throws OffDaysDaoException;

	/** 
	 * Deletes a single row in the off_days table.
	 */
	public void delete(OffDaysPk pk) throws OffDaysDaoException;

	/** 
	 * Returns the rows from the off_days table that matches the specified primary-key value.
	 */
	public OffDays findByPrimaryKey(OffDaysPk pk) throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the criteria 'id = :id'.
	 */
	public OffDays findByPrimaryKey(int id) throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the criteria ''.
	 */
	public OffDays[] findAll() throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the criteria 'id = :id'.
	 */
	public OffDays[] findWhereIdEquals(int id) throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the criteria 'dist_code = :distCode'.
	 */
	public OffDays[] findWhereDistCodeEquals(String distCode) throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the criteria 'sro_code = :sroCode'.
	 */
	public OffDays[] findWhereSroCodeEquals(String sroCode) throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the criteria 'date = :date'.
	 */
	public OffDays[] findWhereDateEquals(Date date) throws OffDaysDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the off_days table that match the specified arbitrary SQL statement
	 */
	public OffDays[] findByDynamicSelect(String sql, Object[] sqlParams) throws OffDaysDaoException;

	/** 
	 * Returns all rows from the off_days table that match the specified arbitrary SQL statement
	 */
	public OffDays[] findByDynamicWhere(String sql, Object[] sqlParams) throws OffDaysDaoException;

}
