/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class AppointmentSlotBookingDaoImpl extends AbstractDAO implements AppointmentSlotBookingDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT slno, appointment_id, officer_id, applicant_name, email, mobile_number, applicant_address, applicant_type, area_type, application_date, application_date_time, deed_type, deed_subtype, consideration_amount, registration_fee, stamp_duty, document_to_be_furnished, doc_subject, whether_land, gender, act, sro_office, appointment_date, appointment_time_slot FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( slno, appointment_id, officer_id, applicant_name, email, mobile_number, applicant_address, applicant_type, area_type, application_date, application_date_time, deed_type, deed_subtype, consideration_amount, registration_fee, stamp_duty, document_to_be_furnished, doc_subject, whether_land, gender, act, sro_office, appointment_date, appointment_time_slot ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET slno = ?, appointment_id = ?, officer_id = ?, applicant_name = ?, email = ?, mobile_number = ?, applicant_address = ?, applicant_type = ?, area_type = ?, application_date = ?, application_date_time = ?, deed_type = ?, deed_subtype = ?, consideration_amount = ?, registration_fee = ?, stamp_duty = ?, document_to_be_furnished = ?, doc_subject = ?, whether_land = ?, gender = ?, act = ?, sro_office = ?, appointment_date = ?, appointment_time_slot = ? WHERE appointment_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE appointment_id = ?";

	/** 
	 * Index of column slno
	 */
	protected static final int COLUMN_SLNO = 1;

	/** 
	 * Index of column appointment_id
	 */
	protected static final int COLUMN_APPOINTMENT_ID = 2;

	/** 
	 * Index of column officer_id
	 */
	protected static final int COLUMN_OFFICER_ID = 3;

	/** 
	 * Index of column applicant_name
	 */
	protected static final int COLUMN_APPLICANT_NAME = 4;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 5;

	/** 
	 * Index of column mobile_number
	 */
	protected static final int COLUMN_MOBILE_NUMBER = 6;

	/** 
	 * Index of column applicant_address
	 */
	protected static final int COLUMN_APPLICANT_ADDRESS = 7;

	/** 
	 * Index of column applicant_type
	 */
	protected static final int COLUMN_APPLICANT_TYPE = 8;

	/** 
	 * Index of column area_type
	 */
	protected static final int COLUMN_AREA_TYPE = 9;

	/** 
	 * Index of column application_date
	 */
	protected static final int COLUMN_APPLICATION_DATE = 10;

	/** 
	 * Index of column application_date_time
	 */
	protected static final int COLUMN_APPLICATION_DATE_TIME = 11;

	/** 
	 * Index of column deed_type
	 */
	protected static final int COLUMN_DEED_TYPE = 12;

	/** 
	 * Index of column deed_subtype
	 */
	protected static final int COLUMN_DEED_SUBTYPE = 13;

	/** 
	 * Index of column consideration_amount
	 */
	protected static final int COLUMN_CONSIDERATION_AMOUNT = 14;

	/** 
	 * Index of column registration_fee
	 */
	protected static final int COLUMN_REGISTRATION_FEE = 15;

	/** 
	 * Index of column stamp_duty
	 */
	protected static final int COLUMN_STAMP_DUTY = 16;

	/** 
	 * Index of column document_to_be_furnished
	 */
	protected static final int COLUMN_DOCUMENT_TO_BE_FURNISHED = 17;

	/** 
	 * Index of column doc_subject
	 */
	protected static final int COLUMN_DOC_SUBJECT = 18;

	/** 
	 * Index of column whether_land
	 */
	protected static final int COLUMN_WHETHER_LAND = 19;

	/** 
	 * Index of column gender
	 */
	protected static final int COLUMN_GENDER = 20;

	/** 
	 * Index of column act
	 */
	protected static final int COLUMN_ACT = 21;

	/** 
	 * Index of column sro_office
	 */
	protected static final int COLUMN_SRO_OFFICE = 22;

	/** 
	 * Index of column appointment_date
	 */
	protected static final int COLUMN_APPOINTMENT_DATE = 23;

	/** 
	 * Index of column appointment_time_slot
	 */
	protected static final int COLUMN_APPOINTMENT_TIME_SLOT = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Index of primary-key column appointment_id
	 */
	protected static final int PK_COLUMN_APPOINTMENT_ID = 1;

	/** 
	 * Inserts a new row in the appointment_slot_booking table.
	 */
	public AppointmentSlotBookingPk insert(AppointmentSlotBooking dto) throws AppointmentSlotBookingDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.isSlnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSlno() );
			}
		
			stmt.setString( index++, dto.getAppointmentId() );
			stmt.setInt( index++, dto.getOfficerId() );
			stmt.setString( index++, dto.getApplicantName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getMobileNumber() );
			stmt.setString( index++, dto.getApplicantAddress() );
			stmt.setString( index++, dto.getApplicantType() );
			stmt.setString( index++, dto.getAreaType() );
			stmt.setDate(index++, dto.getApplicationDate()==null ? null : new java.sql.Date( dto.getApplicationDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getApplicationDateTime()==null ? null : new java.sql.Timestamp( dto.getApplicationDateTime().getTime() ) );
			if (dto.isDeedTypeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getDeedType() );
			}
		
			stmt.setString( index++, dto.getDeedSubtype() );
			if (dto.isConsiderationAmountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getConsiderationAmount() );
			}
		
			if (dto.isRegistrationFeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRegistrationFee() );
			}
		
			if (dto.isStampDutyNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStampDuty() );
			}
		
			stmt.setString( index++, dto.getDocumentToBeFurnished() );
			stmt.setString( index++, dto.getDocSubject() );
			stmt.setShort( index++, dto.getWhetherLand() );
			stmt.setString( index++, dto.getGender() );
			stmt.setString( index++, dto.getAct() );
			stmt.setInt( index++, dto.getSroOffice() );
			stmt.setTimestamp(index++, dto.getAppointmentDate()==null ? null : new java.sql.Timestamp( dto.getAppointmentDate().getTime() ) );
			stmt.setTime(index++, dto.getAppointmentTimeSlot()==null ? null : new java.sql.Time( dto.getAppointmentTimeSlot().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AppointmentSlotBookingDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the appointment_slot_booking table.
	 */
	public void update(AppointmentSlotBookingPk pk, AppointmentSlotBooking dto) throws AppointmentSlotBookingDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.isSlnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSlno() );
			}
		
			stmt.setString( index++, dto.getAppointmentId() );
			stmt.setInt( index++, dto.getOfficerId() );
			stmt.setString( index++, dto.getApplicantName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getMobileNumber() );
			stmt.setString( index++, dto.getApplicantAddress() );
			stmt.setString( index++, dto.getApplicantType() );
			stmt.setString( index++, dto.getAreaType() );
			stmt.setDate(index++, dto.getApplicationDate()==null ? null : new java.sql.Date( dto.getApplicationDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getApplicationDateTime()==null ? null : new java.sql.Timestamp( dto.getApplicationDateTime().getTime() ) );
			if (dto.isDeedTypeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getDeedType() );
			}
		
			stmt.setString( index++, dto.getDeedSubtype() );
			if (dto.isConsiderationAmountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getConsiderationAmount() );
			}
		
			if (dto.isRegistrationFeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRegistrationFee() );
			}
		
			if (dto.isStampDutyNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStampDuty() );
			}
		
			stmt.setString( index++, dto.getDocumentToBeFurnished() );
			stmt.setString( index++, dto.getDocSubject() );
			stmt.setShort( index++, dto.getWhetherLand() );
			stmt.setString( index++, dto.getGender() );
			stmt.setString( index++, dto.getAct() );
			stmt.setInt( index++, dto.getSroOffice() );
			stmt.setTimestamp(index++, dto.getAppointmentDate()==null ? null : new java.sql.Timestamp( dto.getAppointmentDate().getTime() ) );
			stmt.setTime(index++, dto.getAppointmentTimeSlot()==null ? null : new java.sql.Time( dto.getAppointmentTimeSlot().getTime() ) );
			stmt.setString( 25, pk.getAppointmentId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AppointmentSlotBookingDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the appointment_slot_booking table.
	 */
	public void delete(AppointmentSlotBookingPk pk) throws AppointmentSlotBookingDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getAppointmentId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AppointmentSlotBookingDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the appointment_slot_booking table that matches the specified primary-key value.
	 */
	public AppointmentSlotBooking findByPrimaryKey(AppointmentSlotBookingPk pk) throws AppointmentSlotBookingDaoException
	{
		return findByPrimaryKey( pk.getAppointmentId() );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public AppointmentSlotBooking findByPrimaryKey(String appointmentId) throws AppointmentSlotBookingDaoException
	{
		AppointmentSlotBooking ret[] = findByDynamicSelect( SQL_SELECT + " WHERE appointment_id = ?", new Object[] { appointmentId } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria ''.
	 */
	public AppointmentSlotBooking[] findAll() throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY appointment_id", null );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'slno = :slno'.
	 */
	public AppointmentSlotBooking[] findWhereSlnoEquals(int slno) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE slno = ? ORDER BY slno", new Object[] {  new Integer(slno) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public AppointmentSlotBooking[] findWhereAppointmentIdEquals(String appointmentId) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE appointment_id = ? ORDER BY appointment_id", new Object[] { appointmentId } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'officer_id = :officerId'.
	 */
	public AppointmentSlotBooking[] findWhereOfficerIdEquals(int officerId) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE officer_id = ? ORDER BY officer_id", new Object[] {  new Integer(officerId) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'applicant_name = :applicantName'.
	 */
	public AppointmentSlotBooking[] findWhereApplicantNameEquals(String applicantName) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE applicant_name = ? ORDER BY applicant_name", new Object[] { applicantName } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'email = :email'.
	 */
	public AppointmentSlotBooking[] findWhereEmailEquals(String email) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email = ? ORDER BY email", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'mobile_number = :mobileNumber'.
	 */
	public AppointmentSlotBooking[] findWhereMobileNumberEquals(String mobileNumber) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mobile_number = ? ORDER BY mobile_number", new Object[] { mobileNumber } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'applicant_address = :applicantAddress'.
	 */
	public AppointmentSlotBooking[] findWhereApplicantAddressEquals(String applicantAddress) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE applicant_address = ? ORDER BY applicant_address", new Object[] { applicantAddress } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'applicant_type = :applicantType'.
	 */
	public AppointmentSlotBooking[] findWhereApplicantTypeEquals(String applicantType) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE applicant_type = ? ORDER BY applicant_type", new Object[] { applicantType } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'area_type = :areaType'.
	 */
	public AppointmentSlotBooking[] findWhereAreaTypeEquals(String areaType) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE area_type = ? ORDER BY area_type", new Object[] { areaType } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'application_date = :applicationDate'.
	 */
	public AppointmentSlotBooking[] findWhereApplicationDateEquals(Date applicationDate) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_date = ? ORDER BY application_date", new Object[] { applicationDate==null ? null : new java.sql.Date( applicationDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'application_date_time = :applicationDateTime'.
	 */
	public AppointmentSlotBooking[] findWhereApplicationDateTimeEquals(Date applicationDateTime) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_date_time = ? ORDER BY application_date_time", new Object[] { applicationDateTime==null ? null : new java.sql.Timestamp( applicationDateTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'deed_type = :deedType'.
	 */
	public AppointmentSlotBooking[] findWhereDeedTypeEquals(int deedType) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE deed_type = ? ORDER BY deed_type", new Object[] {  new Integer(deedType) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'deed_subtype = :deedSubtype'.
	 */
	public AppointmentSlotBooking[] findWhereDeedSubtypeEquals(String deedSubtype) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE deed_subtype = ? ORDER BY deed_subtype", new Object[] { deedSubtype } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'consideration_amount = :considerationAmount'.
	 */
	public AppointmentSlotBooking[] findWhereConsiderationAmountEquals(int considerationAmount) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE consideration_amount = ? ORDER BY consideration_amount", new Object[] {  new Integer(considerationAmount) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'registration_fee = :registrationFee'.
	 */
	public AppointmentSlotBooking[] findWhereRegistrationFeeEquals(int registrationFee) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE registration_fee = ? ORDER BY registration_fee", new Object[] {  new Integer(registrationFee) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'stamp_duty = :stampDuty'.
	 */
	public AppointmentSlotBooking[] findWhereStampDutyEquals(int stampDuty) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stamp_duty = ? ORDER BY stamp_duty", new Object[] {  new Integer(stampDuty) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'document_to_be_furnished = :documentToBeFurnished'.
	 */
	public AppointmentSlotBooking[] findWhereDocumentToBeFurnishedEquals(String documentToBeFurnished) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_to_be_furnished = ? ORDER BY document_to_be_furnished", new Object[] { documentToBeFurnished } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'doc_subject = :docSubject'.
	 */
	public AppointmentSlotBooking[] findWhereDocSubjectEquals(String docSubject) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE doc_subject = ? ORDER BY doc_subject", new Object[] { docSubject } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'whether_land = :whetherLand'.
	 */
	public AppointmentSlotBooking[] findWhereWhetherLandEquals(short whetherLand) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE whether_land = ? ORDER BY whether_land", new Object[] {  new Short(whetherLand) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'gender = :gender'.
	 */
	public AppointmentSlotBooking[] findWhereGenderEquals(String gender) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE gender = ? ORDER BY gender", new Object[] { gender } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'act = :act'.
	 */
	public AppointmentSlotBooking[] findWhereActEquals(String act) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE act = ? ORDER BY act", new Object[] { act } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'sro_office = :sroOffice'.
	 */
	public AppointmentSlotBooking[] findWhereSroOfficeEquals(int sroOffice) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sro_office = ? ORDER BY sro_office", new Object[] {  new Integer(sroOffice) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_date = :appointmentDate'.
	 */
	public AppointmentSlotBooking[] findWhereAppointmentDateEquals(Date appointmentDate) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE appointment_date = ? ORDER BY appointment_date", new Object[] { appointmentDate==null ? null : new java.sql.Timestamp( appointmentDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_time_slot = :appointmentTimeSlot'.
	 */
	public AppointmentSlotBooking[] findWhereAppointmentTimeSlotEquals(Date appointmentTimeSlot) throws AppointmentSlotBookingDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE appointment_time_slot = ? ORDER BY appointment_time_slot", new Object[] { appointmentTimeSlot==null ? null : new java.sql.Time( appointmentTimeSlot.getTime() ) } );
	}

	/**
	 * Method 'AppointmentSlotBookingDaoImpl'
	 * 
	 */
	public AppointmentSlotBookingDaoImpl()
	{
	}

	/**
	 * Method 'AppointmentSlotBookingDaoImpl'
	 * 
	 * @param userConn
	 */
	public AppointmentSlotBookingDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "appointment_slot_booking";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected AppointmentSlotBooking fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			AppointmentSlotBooking dto = new AppointmentSlotBooking();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected AppointmentSlotBooking[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			AppointmentSlotBooking dto = new AppointmentSlotBooking();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		AppointmentSlotBooking ret[] = new AppointmentSlotBooking[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(AppointmentSlotBooking dto, ResultSet rs) throws SQLException
	{
		dto.setSlno( rs.getInt( COLUMN_SLNO ) );
		if (rs.wasNull()) {
			dto.setSlnoNull( true );
		}
		
		dto.setAppointmentId( rs.getString( COLUMN_APPOINTMENT_ID ) );
		dto.setOfficerId( rs.getInt( COLUMN_OFFICER_ID ) );
		dto.setApplicantName( rs.getString( COLUMN_APPLICANT_NAME ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setMobileNumber( rs.getString( COLUMN_MOBILE_NUMBER ) );
		dto.setApplicantAddress( rs.getString( COLUMN_APPLICANT_ADDRESS ) );
		dto.setApplicantType( rs.getString( COLUMN_APPLICANT_TYPE ) );
		dto.setAreaType( rs.getString( COLUMN_AREA_TYPE ) );
		dto.setApplicationDate( rs.getDate(COLUMN_APPLICATION_DATE ) );
		dto.setApplicationDateTime( rs.getTimestamp(COLUMN_APPLICATION_DATE_TIME ) );
		dto.setDeedType( rs.getInt( COLUMN_DEED_TYPE ) );
		if (rs.wasNull()) {
			dto.setDeedTypeNull( true );
		}
		
		dto.setDeedSubtype( rs.getString( COLUMN_DEED_SUBTYPE ) );
		dto.setConsiderationAmount( rs.getInt( COLUMN_CONSIDERATION_AMOUNT ) );
		if (rs.wasNull()) {
			dto.setConsiderationAmountNull( true );
		}
		
		dto.setRegistrationFee( rs.getInt( COLUMN_REGISTRATION_FEE ) );
		if (rs.wasNull()) {
			dto.setRegistrationFeeNull( true );
		}
		
		dto.setStampDuty( rs.getInt( COLUMN_STAMP_DUTY ) );
		if (rs.wasNull()) {
			dto.setStampDutyNull( true );
		}
		
		dto.setDocumentToBeFurnished( rs.getString( COLUMN_DOCUMENT_TO_BE_FURNISHED ) );
		dto.setDocSubject( rs.getString( COLUMN_DOC_SUBJECT ) );
		dto.setWhetherLand( rs.getShort( COLUMN_WHETHER_LAND ) );
		dto.setGender( rs.getString( COLUMN_GENDER ) );
		dto.setAct( rs.getString( COLUMN_ACT ) );
		dto.setSroOffice( rs.getInt( COLUMN_SRO_OFFICE ) );
		dto.setAppointmentDate( rs.getTimestamp(COLUMN_APPOINTMENT_DATE ) );
		dto.setAppointmentTimeSlot( rs.getTime(COLUMN_APPOINTMENT_TIME_SLOT ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(AppointmentSlotBooking dto)
	{
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the specified arbitrary SQL statement
	 */
	public AppointmentSlotBooking[] findByDynamicSelect(String sql, Object[] sqlParams) throws AppointmentSlotBookingDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AppointmentSlotBookingDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the specified arbitrary SQL statement
	 */
	public AppointmentSlotBooking[] findByDynamicWhere(String sql, Object[] sqlParams) throws AppointmentSlotBookingDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		        System.out.println("See appointment on leave ... " + stmt);
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AppointmentSlotBookingDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
    public int CustomDynamicSelect(String sql, Object[] sqlParams) throws AppointmentSlotBookingDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = sql;

            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }
            System.out.println("Check query stmt .... " + stmt);
            rs = stmt.executeQuery();

            int ret = 0;
            while (rs.next()) {
                ret = rs.getInt(1);
            }

            return ret;

        } catch (Exception _e) {
            _e.printStackTrace();
            throw new AppointmentSlotBookingDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public String CustomDynamicSelect1(String sql, Object[] sqlParams) throws AppointmentSlotBookingDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = sql;
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }

            rs = stmt.executeQuery();

            String ret = null;
            while (rs.next()) {
                ret = rs.getString(1);
            }

            return ret;

        } catch (Exception _e) {
            _e.printStackTrace();
            throw new AppointmentSlotBookingDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

}
