/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.dto.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.List;
import java.util.ArrayList;
import java.math.*;
import java.util.Date;
import org.nic.epanjeeyan.exceptions.*;
import org.nic.epanjeeyan.dto.MutationRecord;

public class MutationRecordDaoImpl extends AbstractDAO implements MutationRecordDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * This is the SQL statement defined for this Custom SQL DAO
	 */
	public static final String SQL = "select d.fcaseno, d.comcaseno, d.casedate, a.mouza, a.dagno, a.pattano, a.barea, a.karea, a.larea, p.nameparty, p.address, p.partytype from docdetail d, areadetail a, party p where d.comcaseno = a.comcaseno and d.comcaseno = p.party_comcaseno and d.casedate >= ? and d.casedate <= ?";

	/**
	 * Method 'MutationRecordDaoImpl'
	 * 
	 */
	public MutationRecordDaoImpl()
	{
	}

	/**
	 * Method 'MutationRecordDaoImpl'
	 * 
	 * @param userConn
	 */
	public MutationRecordDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/**
	 * Method 'executeDynamicSQL'
	 * 
	 * @param sql
	 * @param from_casedate
	 * @param to_casedate
	 * @throws MutationRecordDaoException
	 * @return MutationRecord[]
	 */
	public MutationRecord[] executeDynamicSQL(String sql, Date from_casedate, Date to_casedate) throws MutationRecordDaoException
	{
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			if (isConnSupplied) {
				conn = userConn;
			} else {
				conn = ResourceManager.getConnection();
			}
		
			System.out.println( "Executing " + sql );
			stmt = conn.prepareStatement(sql);
			stmt.setDate(1, from_casedate==null ? null : new java.sql.Date( from_casedate.getTime() ) );
			stmt.setDate(2, to_casedate==null ? null : new java.sql.Date( to_casedate.getTime() ) );
			rs = stmt.executeQuery();
			List list = new ArrayList();
			while (rs.next()) {
				MutationRecord dto = new MutationRecord();
				list.add( dto );
			}
		
			MutationRecord ret[] = new MutationRecord[ list.size() ];
			list.toArray( ret );
			return ret;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MutationRecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/**
	 * Method 'execute'
	 * 
	 * @param from_casedate
	 * @param to_casedate
	 * @throws MutationRecordDaoException
	 * @return MutationRecord[]
	 */
	public MutationRecord[] execute(Date from_casedate, Date to_casedate) throws MutationRecordDaoException
	{
		return executeDynamicSQL( SQL, from_casedate, to_casedate );
	}

	/** 
	 * Returns all rows from the MutationRecord table that match the specified arbitrary SQL statement
	 */
	public MutationRecord[] findByDynamicWhere(String sql, Object[] sqlParams) throws MutationRecordDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			String _SQL = SQL;
			int sqlindex = SQL.toUpperCase().indexOf(" WHERE ");
			if (sqlindex >= 0) {
				StringBuffer s = new StringBuffer(_SQL);
				s.insert(sqlindex+7, sql+" AND ");
				_SQL = s.toString();
			} else {
				_SQL = SQL + " WHERE " + sql;
			}
		
		
		
			System.out.println( "Executing " + _SQL );
			// prepare statement
			stmt = conn.prepareStatement( _SQL );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			List list = new ArrayList();
			while (rs.next()) {
				MutationRecord dto = new MutationRecord();
				list.add( dto );
			}
		
			MutationRecord ret[] = new MutationRecord[ list.size() ];
			list.toArray( ret );
			return ret;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MutationRecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
