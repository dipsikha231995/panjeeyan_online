/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DbusersDaoImpl extends AbstractDAO implements DbusersDao
{
//    String dbname;public DbusersDaoImpl(String dbname) {this.dbname = dbname;}
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT db_id, dbname, officename, password, username, sro_code, district_code FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( db_id, dbname, officename, password, username, sro_code, district_code ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET db_id = ?, dbname = ?, officename = ?, password = ?, username = ?, sro_code = ?, district_code = ? WHERE db_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE db_id = ?";

	/** 
	 * Index of column db_id
	 */
	protected static final int COLUMN_DB_ID = 1;

	/** 
	 * Index of column dbname
	 */
	protected static final int COLUMN_DBNAME = 2;

	/** 
	 * Index of column officename
	 */
	protected static final int COLUMN_OFFICENAME = 3;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 4;

	/** 
	 * Index of column username
	 */
	protected static final int COLUMN_USERNAME = 5;

	/** 
	 * Index of column sro_code
	 */
	protected static final int COLUMN_SRO_CODE = 6;

	/** 
	 * Index of column district_code
	 */
	protected static final int COLUMN_DISTRICT_CODE = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column db_id
	 */
	protected static final int PK_COLUMN_DB_ID = 1;

	/** 
	 * Inserts a new row in the dbusers table.
	 */
	public DbusersPk insert(Dbusers dto) throws DbusersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getDbId() );
			stmt.setString( index++, dto.getDbname() );
			stmt.setString( index++, dto.getOfficename() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getUsername() );
			stmt.setString( index++, dto.getSroCode() );
			stmt.setString( index++, dto.getDistrictCode() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setDbId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DbusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the dbusers table.
	 */
	public void update(DbusersPk pk, Dbusers dto) throws DbusersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getDbId() );
			stmt.setString( index++, dto.getDbname() );
			stmt.setString( index++, dto.getOfficename() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getUsername() );
			stmt.setString( index++, dto.getSroCode() );
			stmt.setString( index++, dto.getDistrictCode() );
			stmt.setInt( 8, pk.getDbId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DbusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the dbusers table.
	 */
	public void delete(DbusersPk pk) throws DbusersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getDbId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DbusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the dbusers table that matches the specified primary-key value.
	 */
	public Dbusers findByPrimaryKey(DbusersPk pk) throws DbusersDaoException
	{
		return findByPrimaryKey( pk.getDbId() );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'db_id = :dbId'.
	 */
	public Dbusers findByPrimaryKey(int dbId) throws DbusersDaoException
	{
		Dbusers ret[] = findByDynamicSelect( SQL_SELECT + " WHERE db_id = ?", new Object[] {  new Integer(dbId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'user = :user'.
	 */
	public Dbusers[] findWhereUserEquals(String user) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user = ? ORDER BY user", new Object[] { user } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria ''.
	 */
	public Dbusers[] findAll() throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY db_id", null );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'db_id = :dbId'.
	 */
	public Dbusers[] findWhereDbIdEquals(int dbId) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE db_id = ? ORDER BY db_id", new Object[] {  new Integer(dbId) } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'dbname = :dbname'.
	 */
	public Dbusers[] findWhereDbnameEquals(String dbname) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dbname = ? ORDER BY dbname", new Object[] { dbname } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'sro_code = :sroCode'.
	 */
	public Dbusers[] findWhereSroCodeEquals(String sroCode) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sro_code = ? ORDER BY sro_code", new Object[] { sroCode } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'district_code = :districtCode'.
	 */
	public Dbusers[] findWhereDistrictCodeEquals(String districtCode) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE district_code = ? ORDER BY district_code", new Object[] { districtCode } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'officename = :officename'.
	 */
	public Dbusers[] findWhereOfficenameEquals(String officename) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE officename = ? ORDER BY officename", new Object[] { officename } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'username = :username'.
	 */
	public Dbusers[] findWhereUsernameEquals(String username) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE username = ? ORDER BY username", new Object[] { username } );
	}

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'password = :password'.
	 */
	public Dbusers[] findWherePasswordEquals(String password) throws DbusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/**
	 * Method 'DbusersDaoImpl'
	 * 
	 */
	public DbusersDaoImpl()
	{
	}

	/**
	 * Method 'DbusersDaoImpl'
	 * 
	 * @param userConn
	 */
	public DbusersDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "dbusers";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Dbusers fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Dbusers dto = new Dbusers();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Dbusers[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Dbusers dto = new Dbusers();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Dbusers ret[] = new Dbusers[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Dbusers dto, ResultSet rs) throws SQLException
	{
		dto.setDbId( rs.getInt( COLUMN_DB_ID ) );
		dto.setDbname( rs.getString( COLUMN_DBNAME ) );
		dto.setOfficename( rs.getString( COLUMN_OFFICENAME ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setUsername( rs.getString( COLUMN_USERNAME ) );
		dto.setSroCode( rs.getString( COLUMN_SRO_CODE ) );
		dto.setDistrictCode( rs.getString( COLUMN_DISTRICT_CODE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Dbusers dto)
	{
	}

	/** 
	 * Returns all rows from the dbusers table that match the specified arbitrary SQL statement
	 */
	public Dbusers[] findByDynamicSelect(String sql, Object[] sqlParams) throws DbusersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DbusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the dbusers table that match the specified arbitrary SQL statement
	 */
	public Dbusers[] findByDynamicWhere(String sql, Object[] sqlParams) throws DbusersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DbusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
