/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DocdetailDaoImpl extends AbstractDAO implements DocdetailDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT slno, caseslno, volslno, fcaseno, casedate, comcaseno, category, conamount, area, rfee, afee, recno, recdate, arecno, arecdt, nocno, nocdate, tdanoc, tdanocdate, no50000, no25000, no20000, no15000, no10000, no5000, no1000, no500, no200, no100, no50, no20, no10, no5, no2, no1, folname, nopage, pridate, scdate, usernm, volno, docsub, rocom, dtadmin, dtcomple, actchargable, nmapplicant, iname, stampfee, catclassi, gbfee, kfee, ofee, ccfee, mafee, ffee, dctype, check_complete, witness_complete, party_complete, land_complete, land_related, district_code, sro_code, reg_fee, other_fee, reg_reciept_no, reg_reciept_date, sub_deed_type, area_type, bookindex, ro_complete, scn_cmplt, ro_authentication, rejection, doc_scan_complete, fngr_scan_cmplt, img_scan_cmplt, whether_old_doc, type_of_reg, doc_pending, issue_date, srnt_pen, impound_doc FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( slno, caseslno, volslno, fcaseno, casedate, comcaseno, category, conamount, area, rfee, afee, recno, recdate, arecno, arecdt, nocno, nocdate, tdanoc, tdanocdate, no50000, no25000, no20000, no15000, no10000, no5000, no1000, no500, no200, no100, no50, no20, no10, no5, no2, no1, folname, nopage, pridate, scdate, usernm, volno, docsub, rocom, dtadmin, dtcomple, actchargable, nmapplicant, iname, stampfee, catclassi, gbfee, kfee, ofee, ccfee, mafee, ffee, dctype, check_complete, witness_complete, party_complete, land_complete, land_related, district_code, sro_code, reg_fee, other_fee, reg_reciept_no, reg_reciept_date, sub_deed_type, area_type, bookindex, ro_complete, scn_cmplt, ro_authentication, rejection, doc_scan_complete, fngr_scan_cmplt, img_scan_cmplt, whether_old_doc, type_of_reg, doc_pending, issue_date, srnt_pen, impound_doc ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET slno = ?, caseslno = ?, volslno = ?, fcaseno = ?, casedate = ?, comcaseno = ?, category = ?, conamount = ?, area = ?, rfee = ?, afee = ?, recno = ?, recdate = ?, arecno = ?, arecdt = ?, nocno = ?, nocdate = ?, tdanoc = ?, tdanocdate = ?, no50000 = ?, no25000 = ?, no20000 = ?, no15000 = ?, no10000 = ?, no5000 = ?, no1000 = ?, no500 = ?, no200 = ?, no100 = ?, no50 = ?, no20 = ?, no10 = ?, no5 = ?, no2 = ?, no1 = ?, folname = ?, nopage = ?, pridate = ?, scdate = ?, usernm = ?, volno = ?, docsub = ?, rocom = ?, dtadmin = ?, dtcomple = ?, actchargable = ?, nmapplicant = ?, iname = ?, stampfee = ?, catclassi = ?, gbfee = ?, kfee = ?, ofee = ?, ccfee = ?, mafee = ?, ffee = ?, dctype = ?, check_complete = ?, witness_complete = ?, party_complete = ?, land_complete = ?, land_related = ?, district_code = ?, sro_code = ?, reg_fee = ?, other_fee = ?, reg_reciept_no = ?, reg_reciept_date = ?, sub_deed_type = ?, area_type = ?, bookindex = ?, ro_complete = ?, scn_cmplt = ?, ro_authentication = ?, rejection = ?, doc_scan_complete = ?, fngr_scan_cmplt = ?, img_scan_cmplt = ?, whether_old_doc = ?, type_of_reg = ?, doc_pending = ?, issue_date = ?, srnt_pen = ?, impound_doc = ? WHERE caseslno = ? AND comcaseno = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE caseslno = ? AND comcaseno = ?";

	/** 
	 * Index of column slno
	 */
	protected static final int COLUMN_SLNO = 1;

	/** 
	 * Index of column caseslno
	 */
	protected static final int COLUMN_CASESLNO = 2;

	/** 
	 * Index of column volslno
	 */
	protected static final int COLUMN_VOLSLNO = 3;

	/** 
	 * Index of column fcaseno
	 */
	protected static final int COLUMN_FCASENO = 4;

	/** 
	 * Index of column casedate
	 */
	protected static final int COLUMN_CASEDATE = 5;

	/** 
	 * Index of column comcaseno
	 */
	protected static final int COLUMN_COMCASENO = 6;

	/** 
	 * Index of column category
	 */
	protected static final int COLUMN_CATEGORY = 7;

	/** 
	 * Index of column conamount
	 */
	protected static final int COLUMN_CONAMOUNT = 8;

	/** 
	 * Index of column area
	 */
	protected static final int COLUMN_AREA = 9;

	/** 
	 * Index of column rfee
	 */
	protected static final int COLUMN_RFEE = 10;

	/** 
	 * Index of column afee
	 */
	protected static final int COLUMN_AFEE = 11;

	/** 
	 * Index of column recno
	 */
	protected static final int COLUMN_RECNO = 12;

	/** 
	 * Index of column recdate
	 */
	protected static final int COLUMN_RECDATE = 13;

	/** 
	 * Index of column arecno
	 */
	protected static final int COLUMN_ARECNO = 14;

	/** 
	 * Index of column arecdt
	 */
	protected static final int COLUMN_ARECDT = 15;

	/** 
	 * Index of column nocno
	 */
	protected static final int COLUMN_NOCNO = 16;

	/** 
	 * Index of column nocdate
	 */
	protected static final int COLUMN_NOCDATE = 17;

	/** 
	 * Index of column tdanoc
	 */
	protected static final int COLUMN_TDANOC = 18;

	/** 
	 * Index of column tdanocdate
	 */
	protected static final int COLUMN_TDANOCDATE = 19;

	/** 
	 * Index of column no50000
	 */
	protected static final int COLUMN_NO50000 = 20;

	/** 
	 * Index of column no25000
	 */
	protected static final int COLUMN_NO25000 = 21;

	/** 
	 * Index of column no20000
	 */
	protected static final int COLUMN_NO20000 = 22;

	/** 
	 * Index of column no15000
	 */
	protected static final int COLUMN_NO15000 = 23;

	/** 
	 * Index of column no10000
	 */
	protected static final int COLUMN_NO10000 = 24;

	/** 
	 * Index of column no5000
	 */
	protected static final int COLUMN_NO5000 = 25;

	/** 
	 * Index of column no1000
	 */
	protected static final int COLUMN_NO1000 = 26;

	/** 
	 * Index of column no500
	 */
	protected static final int COLUMN_NO500 = 27;

	/** 
	 * Index of column no200
	 */
	protected static final int COLUMN_NO200 = 28;

	/** 
	 * Index of column no100
	 */
	protected static final int COLUMN_NO100 = 29;

	/** 
	 * Index of column no50
	 */
	protected static final int COLUMN_NO50 = 30;

	/** 
	 * Index of column no20
	 */
	protected static final int COLUMN_NO20 = 31;

	/** 
	 * Index of column no10
	 */
	protected static final int COLUMN_NO10 = 32;

	/** 
	 * Index of column no5
	 */
	protected static final int COLUMN_NO5 = 33;

	/** 
	 * Index of column no2
	 */
	protected static final int COLUMN_NO2 = 34;

	/** 
	 * Index of column no1
	 */
	protected static final int COLUMN_NO1 = 35;

	/** 
	 * Index of column folname
	 */
	protected static final int COLUMN_FOLNAME = 36;

	/** 
	 * Index of column nopage
	 */
	protected static final int COLUMN_NOPAGE = 37;

	/** 
	 * Index of column pridate
	 */
	protected static final int COLUMN_PRIDATE = 38;

	/** 
	 * Index of column scdate
	 */
	protected static final int COLUMN_SCDATE = 39;

	/** 
	 * Index of column usernm
	 */
	protected static final int COLUMN_USERNM = 40;

	/** 
	 * Index of column volno
	 */
	protected static final int COLUMN_VOLNO = 41;

	/** 
	 * Index of column docsub
	 */
	protected static final int COLUMN_DOCSUB = 42;

	/** 
	 * Index of column rocom
	 */
	protected static final int COLUMN_ROCOM = 43;

	/** 
	 * Index of column dtadmin
	 */
	protected static final int COLUMN_DTADMIN = 44;

	/** 
	 * Index of column dtcomple
	 */
	protected static final int COLUMN_DTCOMPLE = 45;

	/** 
	 * Index of column actchargable
	 */
	protected static final int COLUMN_ACTCHARGABLE = 46;

	/** 
	 * Index of column nmapplicant
	 */
	protected static final int COLUMN_NMAPPLICANT = 47;

	/** 
	 * Index of column iname
	 */
	protected static final int COLUMN_INAME = 48;

	/** 
	 * Index of column stampfee
	 */
	protected static final int COLUMN_STAMPFEE = 49;

	/** 
	 * Index of column catclassi
	 */
	protected static final int COLUMN_CATCLASSI = 50;

	/** 
	 * Index of column gbfee
	 */
	protected static final int COLUMN_GBFEE = 51;

	/** 
	 * Index of column kfee
	 */
	protected static final int COLUMN_KFEE = 52;

	/** 
	 * Index of column ofee
	 */
	protected static final int COLUMN_OFEE = 53;

	/** 
	 * Index of column ccfee
	 */
	protected static final int COLUMN_CCFEE = 54;

	/** 
	 * Index of column mafee
	 */
	protected static final int COLUMN_MAFEE = 55;

	/** 
	 * Index of column ffee
	 */
	protected static final int COLUMN_FFEE = 56;

	/** 
	 * Index of column dctype
	 */
	protected static final int COLUMN_DCTYPE = 57;

	/** 
	 * Index of column check_complete
	 */
	protected static final int COLUMN_CHECK_COMPLETE = 58;

	/** 
	 * Index of column witness_complete
	 */
	protected static final int COLUMN_WITNESS_COMPLETE = 59;

	/** 
	 * Index of column party_complete
	 */
	protected static final int COLUMN_PARTY_COMPLETE = 60;

	/** 
	 * Index of column land_complete
	 */
	protected static final int COLUMN_LAND_COMPLETE = 61;

	/** 
	 * Index of column land_related
	 */
	protected static final int COLUMN_LAND_RELATED = 62;

	/** 
	 * Index of column district_code
	 */
	protected static final int COLUMN_DISTRICT_CODE = 63;

	/** 
	 * Index of column sro_code
	 */
	protected static final int COLUMN_SRO_CODE = 64;

	/** 
	 * Index of column reg_fee
	 */
	protected static final int COLUMN_REG_FEE = 65;

	/** 
	 * Index of column other_fee
	 */
	protected static final int COLUMN_OTHER_FEE = 66;

	/** 
	 * Index of column reg_reciept_no
	 */
	protected static final int COLUMN_REG_RECIEPT_NO = 67;

	/** 
	 * Index of column reg_reciept_date
	 */
	protected static final int COLUMN_REG_RECIEPT_DATE = 68;

	/** 
	 * Index of column sub_deed_type
	 */
	protected static final int COLUMN_SUB_DEED_TYPE = 69;

	/** 
	 * Index of column area_type
	 */
	protected static final int COLUMN_AREA_TYPE = 70;

	/** 
	 * Index of column bookindex
	 */
	protected static final int COLUMN_BOOKINDEX = 71;

	/** 
	 * Index of column ro_complete
	 */
	protected static final int COLUMN_RO_COMPLETE = 72;

	/** 
	 * Index of column scn_cmplt
	 */
	protected static final int COLUMN_SCN_CMPLT = 73;

	/** 
	 * Index of column ro_authentication
	 */
	protected static final int COLUMN_RO_AUTHENTICATION = 74;

	/** 
	 * Index of column rejection
	 */
	protected static final int COLUMN_REJECTION = 75;

	/** 
	 * Index of column doc_scan_complete
	 */
	protected static final int COLUMN_DOC_SCAN_COMPLETE = 76;

	/** 
	 * Index of column fngr_scan_cmplt
	 */
	protected static final int COLUMN_FNGR_SCAN_CMPLT = 77;

	/** 
	 * Index of column img_scan_cmplt
	 */
	protected static final int COLUMN_IMG_SCAN_CMPLT = 78;

	/** 
	 * Index of column whether_old_doc
	 */
	protected static final int COLUMN_WHETHER_OLD_DOC = 79;

	/** 
	 * Index of column type_of_reg
	 */
	protected static final int COLUMN_TYPE_OF_REG = 80;

	/** 
	 * Index of column doc_pending
	 */
	protected static final int COLUMN_DOC_PENDING = 81;

	/** 
	 * Index of column issue_date
	 */
	protected static final int COLUMN_ISSUE_DATE = 82;

	/** 
	 * Index of column srnt_pen
	 */
	protected static final int COLUMN_SRNT_PEN = 83;

	/** 
	 * Index of column impound_doc
	 */
	protected static final int COLUMN_IMPOUND_DOC = 84;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 84;

	/** 
	 * Index of primary-key column caseslno
	 */
	protected static final int PK_COLUMN_CASESLNO = 1;

	/** 
	 * Index of primary-key column comcaseno
	 */
	protected static final int PK_COLUMN_COMCASENO = 2;

	/** 
	 * Inserts a new row in the docdetail table.
	 */
	public DocdetailPk insert(Docdetail dto) throws DocdetailDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.isSlnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSlno() );
			}
		
			stmt.setInt( index++, dto.getCaseslno() );
			if (dto.isVolslnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getVolslno() );
			}
		
			stmt.setString( index++, dto.getFcaseno() );
			stmt.setDate(index++, dto.getCasedate()==null ? null : new java.sql.Date( dto.getCasedate().getTime() ) );
			stmt.setString( index++, dto.getComcaseno() );
			if (dto.isCategoryNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCategory() );
			}
		
			if (dto.isConamountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getConamount() );
			}
		
			stmt.setString( index++, dto.getArea() );
			if (dto.isRfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRfee() );
			}
		
			if (dto.isAfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAfee() );
			}
		
			stmt.setString( index++, dto.getRecno() );
			stmt.setDate(index++, dto.getRecdate()==null ? null : new java.sql.Date( dto.getRecdate().getTime() ) );
			stmt.setString( index++, dto.getArecno() );
			stmt.setDate(index++, dto.getArecdt()==null ? null : new java.sql.Date( dto.getArecdt().getTime() ) );
			stmt.setString( index++, dto.getNocno() );
			stmt.setDate(index++, dto.getNocdate()==null ? null : new java.sql.Date( dto.getNocdate().getTime() ) );
			stmt.setString( index++, dto.getTdanoc() );
			stmt.setDate(index++, dto.getTdanocdate()==null ? null : new java.sql.Date( dto.getTdanocdate().getTime() ) );
			stmt.setInt( index++, dto.getNo50000() );
			stmt.setInt( index++, dto.getNo25000() );
			stmt.setInt( index++, dto.getNo20000() );
			stmt.setInt( index++, dto.getNo15000() );
			stmt.setInt( index++, dto.getNo10000() );
			stmt.setInt( index++, dto.getNo5000() );
			stmt.setInt( index++, dto.getNo1000() );
			stmt.setInt( index++, dto.getNo500() );
			stmt.setInt( index++, dto.getNo200() );
			stmt.setInt( index++, dto.getNo100() );
			stmt.setInt( index++, dto.getNo50() );
			stmt.setInt( index++, dto.getNo20() );
			stmt.setInt( index++, dto.getNo10() );
			stmt.setInt( index++, dto.getNo5() );
			stmt.setInt( index++, dto.getNo2() );
			stmt.setInt( index++, dto.getNo1() );
			stmt.setString( index++, dto.getFolname() );
			if (dto.isNopageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getNopage() );
			}
		
			stmt.setDate(index++, dto.getPridate()==null ? null : new java.sql.Date( dto.getPridate().getTime() ) );
			stmt.setDate(index++, dto.getScdate()==null ? null : new java.sql.Date( dto.getScdate().getTime() ) );
			stmt.setString( index++, dto.getUsernm() );
			stmt.setString( index++, dto.getVolno() );
			stmt.setString( index++, dto.getDocsub() );
			stmt.setString( index++, dto.getRocom() );
			stmt.setTimestamp(index++, dto.getDtadmin()==null ? null :  dto.getDtadmin() );
			stmt.setTimestamp(index++, dto.getDtcomple()==null ? null : dto.getDtcomple() );
			stmt.setString( index++, dto.getActchargable() );
			stmt.setString( index++, dto.getNmapplicant() );
			stmt.setString( index++, dto.getIname() );
			if (dto.isStampfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStampfee() );
			}
		
			if (dto.isCatclassiNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCatclassi() );
			}
		
			if (dto.isGbfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGbfee() );
			}
		
			if (dto.isKfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getKfee() );
			}
		
			if (dto.isOfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getOfee() );
			}
		
			if (dto.isCcfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCcfee() );
			}
		
			if (dto.isMafeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getMafee() );
			}
		
			if (dto.isFfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFfee() );
			}
		
			stmt.setString( index++, dto.getDctype() );
			stmt.setInt( index++, dto.getCheckComplete() );
			stmt.setInt( index++, dto.getWitnessComplete() );
			stmt.setInt( index++, dto.getPartyComplete() );
			stmt.setInt( index++, dto.getLandComplete() );
			stmt.setInt( index++, dto.getLandRelated() );
			stmt.setString( index++, dto.getDistrictCode() );
			stmt.setString( index++, dto.getSroCode() );
			if (dto.isRegFeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRegFee() );
			}
		
			if (dto.isOtherFeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getOtherFee() );
			}
		
			stmt.setString( index++, dto.getRegRecieptNo() );
			stmt.setDate(index++, dto.getRegRecieptDate()==null ? null : new java.sql.Date( dto.getRegRecieptDate().getTime() ) );
			stmt.setString( index++, dto.getSubDeedType() );
			stmt.setString( index++, dto.getAreaType() );
			stmt.setString( index++, dto.getBookindex() );
			stmt.setInt( index++, dto.getRoComplete() );
			stmt.setInt( index++, dto.getScnCmplt() );
			stmt.setInt( index++, dto.getRoAuthentication() );
			stmt.setInt( index++, dto.getRejection() );
			stmt.setInt( index++, dto.getDocScanComplete() );
			stmt.setInt( index++, dto.getFngrScanCmplt() );
			stmt.setInt( index++, dto.getImgScanCmplt() );
			stmt.setInt( index++, dto.getWhetherOldDoc() );
			stmt.setString( index++, dto.getTypeOfReg() );
			stmt.setInt( index++, dto.getDocPending() );
			stmt.setDate(index++, dto.getIssueDate()==null ? null : new java.sql.Date( dto.getIssueDate().getTime() ) );
			stmt.setInt( index++, dto.getSrntPen() );
                       // @comment start
                        System.out.println(dto);
                        System.out.println("insert code goes here");
                       // @comment end
			stmt.setInt( index++, dto.getImpoundDoc() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the docdetail table.
	 */
	public void update(DocdetailPk pk, Docdetail dto) throws DocdetailDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
                        System.out.println("SQL update"+ SQL_UPDATE+"stmt"+stmt);
			int index=1;
			if (dto.isSlnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSlno() );
			}
		
			stmt.setInt( index++, dto.getCaseslno() );
			if (dto.isVolslnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getVolslno() );
			}
		
			stmt.setString( index++, dto.getFcaseno() );
			stmt.setDate(index++, dto.getCasedate()==null ? null : new java.sql.Date( dto.getCasedate().getTime() ) );
			stmt.setString( index++, dto.getComcaseno() );
			if (dto.isCategoryNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCategory() );
			}
		
			if (dto.isConamountNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getConamount() );
			}
		
			stmt.setString( index++, dto.getArea() );
			if (dto.isRfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRfee() );
			}
		
			if (dto.isAfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAfee() );
			}
		
			stmt.setString( index++, dto.getRecno() );
			stmt.setDate(index++, dto.getRecdate()==null ? null : new java.sql.Date( dto.getRecdate().getTime() ) );
			stmt.setString( index++, dto.getArecno() );
			stmt.setDate(index++, dto.getArecdt()==null ? null : new java.sql.Date( dto.getArecdt().getTime() ) );
			stmt.setString( index++, dto.getNocno() );
			stmt.setDate(index++, dto.getNocdate()==null ? null : new java.sql.Date( dto.getNocdate().getTime() ) );
			stmt.setString( index++, dto.getTdanoc() );
			stmt.setDate(index++, dto.getTdanocdate()==null ? null : new java.sql.Date( dto.getTdanocdate().getTime() ) );
			stmt.setInt( index++, dto.getNo50000() );
			stmt.setInt( index++, dto.getNo25000() );
			stmt.setInt( index++, dto.getNo20000() );
			stmt.setInt( index++, dto.getNo15000() );
			stmt.setInt( index++, dto.getNo10000() );
			stmt.setInt( index++, dto.getNo5000() );
			stmt.setInt( index++, dto.getNo1000() );
			stmt.setInt( index++, dto.getNo500() );
			stmt.setInt( index++, dto.getNo200() );
			stmt.setInt( index++, dto.getNo100() );
			stmt.setInt( index++, dto.getNo50() );
			stmt.setInt( index++, dto.getNo20() );
			stmt.setInt( index++, dto.getNo10() );
			stmt.setInt( index++, dto.getNo5() );
			stmt.setInt( index++, dto.getNo2() );
			stmt.setInt( index++, dto.getNo1() );
			stmt.setString( index++, dto.getFolname() );
			if (dto.isNopageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getNopage() );
			}
		
			stmt.setDate(index++, dto.getPridate()==null ? null : new java.sql.Date( dto.getPridate().getTime() ) );
			stmt.setDate(index++, dto.getScdate()==null ? null : new java.sql.Date( dto.getScdate().getTime() ) );
			stmt.setString( index++, dto.getUsernm() );
			stmt.setString( index++, dto.getVolno() );
			stmt.setString( index++, dto.getDocsub() );
			stmt.setString( index++, dto.getRocom() );
			stmt.setTimestamp(index++, dto.getDtadmin()==null ? null :  dto.getDtadmin() );
			stmt.setDate(index++, dto.getDtcomple()==null ? null : new java.sql.Date( dto.getDtcomple().getTime() ) );
			stmt.setString( index++, dto.getActchargable() );
			stmt.setString( index++, dto.getNmapplicant() );
			stmt.setString( index++, dto.getIname() );
			if (dto.isStampfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStampfee() );
			}
		
			if (dto.isCatclassiNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCatclassi() );
			}
		
			if (dto.isGbfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGbfee() );
			}
		
			if (dto.isKfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getKfee() );
			}
		
			if (dto.isOfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getOfee() );
			}
		
			if (dto.isCcfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCcfee() );
			}
		
			if (dto.isMafeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getMafee() );
			}
		
			if (dto.isFfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFfee() );
			}
		
			stmt.setString( index++, dto.getDctype() );
			stmt.setInt( index++, dto.getCheckComplete() );
			stmt.setInt( index++, dto.getWitnessComplete() );
			stmt.setInt( index++, dto.getPartyComplete() );
			stmt.setInt( index++, dto.getLandComplete() );
			stmt.setInt( index++, dto.getLandRelated() );
			stmt.setString( index++, dto.getDistrictCode() );
			stmt.setString( index++, dto.getSroCode() );
			if (dto.isRegFeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRegFee() );
			}
		
			if (dto.isOtherFeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getOtherFee() );
			}
		
			stmt.setString( index++, dto.getRegRecieptNo() );
			stmt.setDate(index++, dto.getRegRecieptDate()==null ? null : new java.sql.Date( dto.getRegRecieptDate().getTime() ) );
			stmt.setString( index++, dto.getSubDeedType() );
			stmt.setString( index++, dto.getAreaType() );
			stmt.setString( index++, dto.getBookindex() );
			stmt.setInt( index++, dto.getRoComplete() );
			stmt.setInt( index++, dto.getScnCmplt() );
			stmt.setInt( index++, dto.getRoAuthentication() );
			stmt.setInt( index++, dto.getRejection() );
			stmt.setInt( index++, dto.getDocScanComplete() );
			stmt.setInt( index++, dto.getFngrScanCmplt() );
			stmt.setInt( index++, dto.getImgScanCmplt() );
			stmt.setInt( index++, dto.getWhetherOldDoc() );
			stmt.setString( index++, dto.getTypeOfReg() );
			stmt.setInt( index++, dto.getDocPending() );
			stmt.setDate(index++, dto.getIssueDate()==null ? null : new java.sql.Date( dto.getIssueDate().getTime() ) );
			stmt.setInt( index++, dto.getSrntPen() );
			stmt.setInt( index++, dto.getImpoundDoc() );
			stmt.setInt( 85, pk.getCaseslno() );
			stmt.setString( 86, pk.getComcaseno() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the docdetail table.
	 */
	public void delete(DocdetailPk pk) throws DocdetailDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getCaseslno() );
			stmt.setString( 2, pk.getComcaseno() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the docdetail table that matches the specified primary-key value.
	 */
	public Docdetail findByPrimaryKey(DocdetailPk pk) throws DocdetailDaoException
	{
		return findByPrimaryKey( pk.getCaseslno(), pk.getComcaseno() );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'caseslno = :caseslno AND comcaseno = :comcaseno'.
	 */
	public Docdetail findByPrimaryKey(int caseslno, String comcaseno) throws DocdetailDaoException
	{
		Docdetail ret[] = findByDynamicSelect( SQL_SELECT + " WHERE caseslno = ? AND comcaseno = ?", new Object[] {  new Integer(caseslno), comcaseno } );
		return ret.length==0 ? null : ret[0];
	}
        public Docdetail[] pageAll(Integer offset,Integer num) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY caseslno, comcaseno limit "
                 + num + " offset " + offset , null );
	}
	/** 
	 * Returns all rows from the docdetail table that match the criteria ''.
	 */
	public Docdetail[] findAll() throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY caseslno, comcaseno", null );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'slno = :slno'.
	 */
	public Docdetail[] findWhereSlnoEquals(int slno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE slno = ? ORDER BY slno", new Object[] {  new Integer(slno) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'caseslno = :caseslno'.
	 */
	public Docdetail[] findWhereCaseslnoEquals(int caseslno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE caseslno = ? ORDER BY caseslno", new Object[] {  new Integer(caseslno) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'volslno = :volslno'.
	 */
	public Docdetail[] findWhereVolslnoEquals(int volslno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE volslno = ? ORDER BY volslno", new Object[] {  new Integer(volslno) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'fcaseno = :fcaseno'.
	 */
	public Docdetail[] findWhereFcasenoEquals(String fcaseno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fcaseno = ? ORDER BY fcaseno", new Object[] { fcaseno } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'casedate = :casedate'.
	 */
	public Docdetail[] findWhereCasedateEquals(Date casedate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE casedate = ? ORDER BY casedate", new Object[] { casedate==null ? null : new java.sql.Date( casedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'comcaseno = :comcaseno'.
	 */
	public Docdetail[] findWhereComcasenoEquals(String comcaseno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE comcaseno = ? ORDER BY comcaseno", new Object[] { comcaseno } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'category = :category'.
	 */
	public Docdetail[] findWhereCategoryEquals(int category) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE category = ? ORDER BY category", new Object[] {  new Integer(category) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'conamount = :conamount'.
	 */
	public Docdetail[] findWhereConamountEquals(int conamount) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE conamount = ? ORDER BY conamount", new Object[] {  new Integer(conamount) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'area = :area'.
	 */
	public Docdetail[] findWhereAreaEquals(String area) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE area = ? ORDER BY area", new Object[] { area } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'rfee = :rfee'.
	 */
	public Docdetail[] findWhereRfeeEquals(int rfee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rfee = ? ORDER BY rfee", new Object[] {  new Integer(rfee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'afee = :afee'.
	 */
	public Docdetail[] findWhereAfeeEquals(int afee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE afee = ? ORDER BY afee", new Object[] {  new Integer(afee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'recno = :recno'.
	 */
	public Docdetail[] findWhereRecnoEquals(String recno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE recno = ? ORDER BY recno", new Object[] { recno } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'recdate = :recdate'.
	 */
	public Docdetail[] findWhereRecdateEquals(Date recdate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE recdate = ? ORDER BY recdate", new Object[] { recdate==null ? null : new java.sql.Date( recdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'arecno = :arecno'.
	 */
	public Docdetail[] findWhereArecnoEquals(String arecno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE arecno = ? ORDER BY arecno", new Object[] { arecno } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'arecdt = :arecdt'.
	 */
	public Docdetail[] findWhereArecdtEquals(Date arecdt) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE arecdt = ? ORDER BY arecdt", new Object[] { arecdt==null ? null : new java.sql.Date( arecdt.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'nocno = :nocno'.
	 */
	public Docdetail[] findWhereNocnoEquals(String nocno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nocno = ? ORDER BY nocno", new Object[] { nocno } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'nocdate = :nocdate'.
	 */
	public Docdetail[] findWhereNocdateEquals(Date nocdate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nocdate = ? ORDER BY nocdate", new Object[] { nocdate==null ? null : new java.sql.Date( nocdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'tdanoc = :tdanoc'.
	 */
	public Docdetail[] findWhereTdanocEquals(String tdanoc) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tdanoc = ? ORDER BY tdanoc", new Object[] { tdanoc } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'tdanocdate = :tdanocdate'.
	 */
	public Docdetail[] findWhereTdanocdateEquals(Date tdanocdate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tdanocdate = ? ORDER BY tdanocdate", new Object[] { tdanocdate==null ? null : new java.sql.Date( tdanocdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no50000 = :no50000'.
	 */
	public Docdetail[] findWhereNo50000Equals(int no50000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no50000 = ? ORDER BY no50000", new Object[] {  new Integer(no50000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no25000 = :no25000'.
	 */
	public Docdetail[] findWhereNo25000Equals(int no25000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no25000 = ? ORDER BY no25000", new Object[] {  new Integer(no25000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no20000 = :no20000'.
	 */
	public Docdetail[] findWhereNo20000Equals(int no20000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no20000 = ? ORDER BY no20000", new Object[] {  new Integer(no20000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no15000 = :no15000'.
	 */
	public Docdetail[] findWhereNo15000Equals(int no15000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no15000 = ? ORDER BY no15000", new Object[] {  new Integer(no15000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no10000 = :no10000'.
	 */
	public Docdetail[] findWhereNo10000Equals(int no10000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no10000 = ? ORDER BY no10000", new Object[] {  new Integer(no10000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no5000 = :no5000'.
	 */
	public Docdetail[] findWhereNo5000Equals(int no5000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no5000 = ? ORDER BY no5000", new Object[] {  new Integer(no5000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no1000 = :no1000'.
	 */
	public Docdetail[] findWhereNo1000Equals(int no1000) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no1000 = ? ORDER BY no1000", new Object[] {  new Integer(no1000) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no500 = :no500'.
	 */
	public Docdetail[] findWhereNo500Equals(int no500) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no500 = ? ORDER BY no500", new Object[] {  new Integer(no500) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no200 = :no200'.
	 */
	public Docdetail[] findWhereNo200Equals(int no200) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no200 = ? ORDER BY no200", new Object[] {  new Integer(no200) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no100 = :no100'.
	 */
	public Docdetail[] findWhereNo100Equals(int no100) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no100 = ? ORDER BY no100", new Object[] {  new Integer(no100) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no50 = :no50'.
	 */
	public Docdetail[] findWhereNo50Equals(int no50) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no50 = ? ORDER BY no50", new Object[] {  new Integer(no50) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no20 = :no20'.
	 */
	public Docdetail[] findWhereNo20Equals(int no20) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no20 = ? ORDER BY no20", new Object[] {  new Integer(no20) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no10 = :no10'.
	 */
	public Docdetail[] findWhereNo10Equals(int no10) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no10 = ? ORDER BY no10", new Object[] {  new Integer(no10) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no5 = :no5'.
	 */
	public Docdetail[] findWhereNo5Equals(int no5) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no5 = ? ORDER BY no5", new Object[] {  new Integer(no5) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no2 = :no2'.
	 */
	public Docdetail[] findWhereNo2Equals(int no2) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no2 = ? ORDER BY no2", new Object[] {  new Integer(no2) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'no1 = :no1'.
	 */
	public Docdetail[] findWhereNo1Equals(int no1) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE no1 = ? ORDER BY no1", new Object[] {  new Integer(no1) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'folname = :folname'.
	 */
	public Docdetail[] findWhereFolnameEquals(String folname) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE folname = ? ORDER BY folname", new Object[] { folname } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'nopage = :nopage'.
	 */
	public Docdetail[] findWhereNopageEquals(int nopage) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nopage = ? ORDER BY nopage", new Object[] {  new Integer(nopage) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'pridate = :pridate'.
	 */
	public Docdetail[] findWherePridateEquals(Date pridate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pridate = ? ORDER BY pridate", new Object[] { pridate==null ? null : new java.sql.Date( pridate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'scdate = :scdate'.
	 */
	public Docdetail[] findWhereScdateEquals(Date scdate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scdate = ? ORDER BY scdate", new Object[] { scdate==null ? null : new java.sql.Date( scdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'usernm = :usernm'.
	 */
	public Docdetail[] findWhereUsernmEquals(String usernm) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usernm = ? ORDER BY usernm", new Object[] { usernm } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'volno = :volno'.
	 */
	public Docdetail[] findWhereVolnoEquals(String volno) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE volno = ? ORDER BY volno", new Object[] { volno } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'docsub = :docsub'.
	 */
	public Docdetail[] findWhereDocsubEquals(String docsub) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE docsub = ? ORDER BY docsub", new Object[] { docsub } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'rocom = :rocom'.
	 */
	public Docdetail[] findWhereRocomEquals(String rocom) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rocom = ? ORDER BY rocom", new Object[] { rocom } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'dtadmin = :dtadmin'.
	 */
	public Docdetail[] findWhereDtadminEquals(Date dtadmin) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dtadmin = ? ORDER BY dtadmin", new Object[] { dtadmin==null ? null : new java.sql.Date( dtadmin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'dtcomple = :dtcomple'.
	 */
	public Docdetail[] findWhereDtcompleEquals(Date dtcomple) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dtcomple = ? ORDER BY dtcomple", new Object[] { dtcomple==null ? null : new java.sql.Date( dtcomple.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'actchargable = :actchargable'.
	 */
	public Docdetail[] findWhereActchargableEquals(String actchargable) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE actchargable = ? ORDER BY actchargable", new Object[] { actchargable } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'nmapplicant = :nmapplicant'.
	 */
	public Docdetail[] findWhereNmapplicantEquals(String nmapplicant) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nmapplicant = ? ORDER BY nmapplicant", new Object[] { nmapplicant } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'iname = :iname'.
	 */
	public Docdetail[] findWhereInameEquals(String iname) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE iname = ? ORDER BY iname", new Object[] { iname } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'stampfee = :stampfee'.
	 */
	public Docdetail[] findWhereStampfeeEquals(int stampfee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stampfee = ? ORDER BY stampfee", new Object[] {  new Integer(stampfee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'catclassi = :catclassi'.
	 */
	public Docdetail[] findWhereCatclassiEquals(int catclassi) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE catclassi = ? ORDER BY catclassi", new Object[] {  new Integer(catclassi) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'gbfee = :gbfee'.
	 */
	public Docdetail[] findWhereGbfeeEquals(int gbfee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE gbfee = ? ORDER BY gbfee", new Object[] {  new Integer(gbfee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'kfee = :kfee'.
	 */
	public Docdetail[] findWhereKfeeEquals(int kfee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE kfee = ? ORDER BY kfee", new Object[] {  new Integer(kfee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'ofee = :ofee'.
	 */
	public Docdetail[] findWhereOfeeEquals(int ofee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ofee = ? ORDER BY ofee", new Object[] {  new Integer(ofee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'ccfee = :ccfee'.
	 */
	public Docdetail[] findWhereCcfeeEquals(int ccfee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ccfee = ? ORDER BY ccfee", new Object[] {  new Integer(ccfee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'mafee = :mafee'.
	 */
	public Docdetail[] findWhereMafeeEquals(int mafee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mafee = ? ORDER BY mafee", new Object[] {  new Integer(mafee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'ffee = :ffee'.
	 */
	public Docdetail[] findWhereFfeeEquals(int ffee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ffee = ? ORDER BY ffee", new Object[] {  new Integer(ffee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'dctype = :dctype'.
	 */
	public Docdetail[] findWhereDctypeEquals(String dctype) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dctype = ? ORDER BY dctype", new Object[] { dctype } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'check_complete = :checkComplete'.
	 */
	public Docdetail[] findWhereCheckCompleteEquals(int checkComplete) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE check_complete = ? ORDER BY check_complete", new Object[] {  new Integer(checkComplete) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'witness_complete = :witnessComplete'.
	 */
	public Docdetail[] findWhereWitnessCompleteEquals(int witnessComplete) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE witness_complete = ? ORDER BY witness_complete", new Object[] {  new Integer(witnessComplete) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'party_complete = :partyComplete'.
	 */
	public Docdetail[] findWherePartyCompleteEquals(int partyComplete) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE party_complete = ? ORDER BY party_complete", new Object[] {  new Integer(partyComplete) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'land_complete = :landComplete'.
	 */
	public Docdetail[] findWhereLandCompleteEquals(int landComplete) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE land_complete = ? ORDER BY land_complete", new Object[] {  new Integer(landComplete) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'land_related = :landRelated'.
	 */
	public Docdetail[] findWhereLandRelatedEquals(int landRelated) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE land_related = ? ORDER BY land_related", new Object[] {  new Integer(landRelated) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'district_code = :districtCode'.
	 */
	public Docdetail[] findWhereDistrictCodeEquals(String districtCode) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE district_code = ? ORDER BY district_code", new Object[] { districtCode } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'sro_code = :sroCode'.
	 */
	public Docdetail[] findWhereSroCodeEquals(String sroCode) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sro_code = ? ORDER BY sro_code", new Object[] { sroCode } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'reg_fee = :regFee'.
	 */
	public Docdetail[] findWhereRegFeeEquals(int regFee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE reg_fee = ? ORDER BY reg_fee", new Object[] {  new Integer(regFee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'other_fee = :otherFee'.
	 */
	public Docdetail[] findWhereOtherFeeEquals(int otherFee) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE other_fee = ? ORDER BY other_fee", new Object[] {  new Integer(otherFee) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'reg_reciept_no = :regRecieptNo'.
	 */
	public Docdetail[] findWhereRegRecieptNoEquals(String regRecieptNo) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE reg_reciept_no = ? ORDER BY reg_reciept_no", new Object[] { regRecieptNo } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'reg_reciept_date = :regRecieptDate'.
	 */
	public Docdetail[] findWhereRegRecieptDateEquals(Date regRecieptDate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE reg_reciept_date = ? ORDER BY reg_reciept_date", new Object[] { regRecieptDate==null ? null : new java.sql.Date( regRecieptDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'sub_deed_type = :subDeedType'.
	 */
	public Docdetail[] findWhereSubDeedTypeEquals(String subDeedType) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sub_deed_type = ? ORDER BY sub_deed_type", new Object[] { subDeedType } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'area_type = :areaType'.
	 */
	public Docdetail[] findWhereAreaTypeEquals(String areaType) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE area_type = ? ORDER BY area_type", new Object[] { areaType } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'bookindex = :bookindex'.
	 */
	public Docdetail[] findWhereBookindexEquals(String bookindex) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bookindex = ? ORDER BY bookindex", new Object[] { bookindex } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'ro_complete = :roComplete'.
	 */
	public Docdetail[] findWhereRoCompleteEquals(int roComplete) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ro_complete = ? ORDER BY ro_complete", new Object[] {  new Integer(roComplete) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'scn_cmplt = :scnCmplt'.
	 */
	public Docdetail[] findWhereScnCmpltEquals(int scnCmplt) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE scn_cmplt = ? ORDER BY scn_cmplt", new Object[] {  new Integer(scnCmplt) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'ro_authentication = :roAuthentication'.
	 */
	public Docdetail[] findWhereRoAuthenticationEquals(int roAuthentication) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ro_authentication = ? ORDER BY ro_authentication", new Object[] {  new Integer(roAuthentication) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'rejection = :rejection'.
	 */
	public Docdetail[] findWhereRejectionEquals(int rejection) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rejection = ? ORDER BY rejection", new Object[] {  new Integer(rejection) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'doc_scan_complete = :docScanComplete'.
	 */
	public Docdetail[] findWhereDocScanCompleteEquals(int docScanComplete) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE doc_scan_complete = ? ORDER BY doc_scan_complete", new Object[] {  new Integer(docScanComplete) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'fngr_scan_cmplt = :fngrScanCmplt'.
	 */
	public Docdetail[] findWhereFngrScanCmpltEquals(int fngrScanCmplt) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fngr_scan_cmplt = ? ORDER BY fngr_scan_cmplt", new Object[] {  new Integer(fngrScanCmplt) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'img_scan_cmplt = :imgScanCmplt'.
	 */
	public Docdetail[] findWhereImgScanCmpltEquals(int imgScanCmplt) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE img_scan_cmplt = ? ORDER BY img_scan_cmplt", new Object[] {  new Integer(imgScanCmplt) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'whether_old_doc = :whetherOldDoc'.
	 */
	public Docdetail[] findWhereWhetherOldDocEquals(int whetherOldDoc) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE whether_old_doc = ? ORDER BY whether_old_doc", new Object[] {  new Integer(whetherOldDoc) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'type_of_reg = :typeOfReg'.
	 */
	public Docdetail[] findWhereTypeOfRegEquals(String typeOfReg) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE type_of_reg = ? ORDER BY type_of_reg", new Object[] { typeOfReg } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'doc_pending = :docPending'.
	 */
	public Docdetail[] findWhereDocPendingEquals(int docPending) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE doc_pending = ? ORDER BY doc_pending", new Object[] {  new Integer(docPending) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'issue_date = :issueDate'.
	 */
	public Docdetail[] findWhereIssueDateEquals(Date issueDate) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE issue_date = ? ORDER BY issue_date", new Object[] { issueDate==null ? null : new java.sql.Date( issueDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'srnt_pen = :srntPen'.
	 */
	public Docdetail[] findWhereSrntPenEquals(int srntPen) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE srnt_pen = ? ORDER BY srnt_pen", new Object[] {  new Integer(srntPen) } );
	}

	/** 
	 * Returns all rows from the docdetail table that match the criteria 'impound_doc = :impoundDoc'.
	 */
	public Docdetail[] findWhereImpoundDocEquals(int impoundDoc) throws DocdetailDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE impound_doc = ? ORDER BY impound_doc", new Object[] {  new Integer(impoundDoc) } );
	}

	/**
	 * Method 'DocdetailDaoImpl'
	 * 
	 */
	public DocdetailDaoImpl()
	{
	}

	/**
	 * Method 'DocdetailDaoImpl'
	 * 
	 * @param userConn
	 */
	public DocdetailDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "docdetail";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Docdetail fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Docdetail dto = new Docdetail();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Docdetail[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Docdetail dto = new Docdetail();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Docdetail ret[] = new Docdetail[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Docdetail dto, ResultSet rs) throws SQLException
	{
		dto.setSlno( rs.getInt( COLUMN_SLNO ) );
		if (rs.wasNull()) {
			dto.setSlnoNull( true );
		}
		
		dto.setCaseslno( rs.getInt( COLUMN_CASESLNO ) );
		dto.setVolslno( rs.getInt( COLUMN_VOLSLNO ) );
		if (rs.wasNull()) {
			dto.setVolslnoNull( true );
		}
		
		dto.setFcaseno( rs.getString( COLUMN_FCASENO ) );
		dto.setCasedate( rs.getDate(COLUMN_CASEDATE ) );
		dto.setComcaseno( rs.getString( COLUMN_COMCASENO ) );
		dto.setCategory( rs.getInt( COLUMN_CATEGORY ) );
		if (rs.wasNull()) {
			dto.setCategoryNull( true );
		}
		
		dto.setConamount( rs.getInt( COLUMN_CONAMOUNT ) );
		if (rs.wasNull()) {
			dto.setConamountNull( true );
		}
		
		dto.setArea( rs.getString( COLUMN_AREA ) );
		dto.setRfee( rs.getInt( COLUMN_RFEE ) );
		if (rs.wasNull()) {
			dto.setRfeeNull( true );
		}
		
		dto.setAfee( rs.getInt( COLUMN_AFEE ) );
		if (rs.wasNull()) {
			dto.setAfeeNull( true );
		}
		
		dto.setRecno( rs.getString( COLUMN_RECNO ) );
		dto.setRecdate( rs.getDate(COLUMN_RECDATE ) );
		dto.setArecno( rs.getString( COLUMN_ARECNO ) );
		dto.setArecdt( rs.getDate(COLUMN_ARECDT ) );
		dto.setNocno( rs.getString( COLUMN_NOCNO ) );
		dto.setNocdate( rs.getDate(COLUMN_NOCDATE ) );
		dto.setTdanoc( rs.getString( COLUMN_TDANOC ) );
		dto.setTdanocdate( rs.getDate(COLUMN_TDANOCDATE ) );
		dto.setNo50000( rs.getInt( COLUMN_NO50000 ) );
		dto.setNo25000( rs.getInt( COLUMN_NO25000 ) );
		dto.setNo20000( rs.getInt( COLUMN_NO20000 ) );
		dto.setNo15000( rs.getInt( COLUMN_NO15000 ) );
		dto.setNo10000( rs.getInt( COLUMN_NO10000 ) );
		dto.setNo5000( rs.getInt( COLUMN_NO5000 ) );
		dto.setNo1000( rs.getInt( COLUMN_NO1000 ) );
		dto.setNo500( rs.getInt( COLUMN_NO500 ) );
		dto.setNo200( rs.getInt( COLUMN_NO200 ) );
		dto.setNo100( rs.getInt( COLUMN_NO100 ) );
		dto.setNo50( rs.getInt( COLUMN_NO50 ) );
		dto.setNo20( rs.getInt( COLUMN_NO20 ) );
		dto.setNo10( rs.getInt( COLUMN_NO10 ) );
		dto.setNo5( rs.getInt( COLUMN_NO5 ) );
		dto.setNo2( rs.getInt( COLUMN_NO2 ) );
		dto.setNo1( rs.getInt( COLUMN_NO1 ) );
		dto.setFolname( rs.getString( COLUMN_FOLNAME ) );
		dto.setNopage( rs.getInt( COLUMN_NOPAGE ) );
		if (rs.wasNull()) {
			dto.setNopageNull( true );
		}
		
		dto.setPridate( rs.getDate(COLUMN_PRIDATE ) );
		dto.setScdate( rs.getDate(COLUMN_SCDATE ) );
		dto.setUsernm( rs.getString( COLUMN_USERNM ) );
		dto.setVolno( rs.getString( COLUMN_VOLNO ) );
		dto.setDocsub( rs.getString( COLUMN_DOCSUB ) );
		dto.setRocom( rs.getString( COLUMN_ROCOM ) );
		dto.setDtadmin( rs.getTimestamp(COLUMN_DTADMIN ) );
		dto.setDtcomple( rs.getTimestamp(COLUMN_DTCOMPLE ) );
		dto.setActchargable( rs.getString( COLUMN_ACTCHARGABLE ) );
		dto.setNmapplicant( rs.getString( COLUMN_NMAPPLICANT ) );
		dto.setIname( rs.getString( COLUMN_INAME ) );
		dto.setStampfee( rs.getInt( COLUMN_STAMPFEE ) );
		if (rs.wasNull()) {
			dto.setStampfeeNull( true );
		}
		
		dto.setCatclassi( rs.getInt( COLUMN_CATCLASSI ) );
		if (rs.wasNull()) {
			dto.setCatclassiNull( true );
		}
		
		dto.setGbfee( rs.getInt( COLUMN_GBFEE ) );
		if (rs.wasNull()) {
			dto.setGbfeeNull( true );
		}
		
		dto.setKfee( rs.getInt( COLUMN_KFEE ) );
		if (rs.wasNull()) {
			dto.setKfeeNull( true );
		}
		
		dto.setOfee( rs.getInt( COLUMN_OFEE ) );
		if (rs.wasNull()) {
			dto.setOfeeNull( true );
		}
		
		dto.setCcfee( rs.getInt( COLUMN_CCFEE ) );
		if (rs.wasNull()) {
			dto.setCcfeeNull( true );
		}
		
		dto.setMafee( rs.getInt( COLUMN_MAFEE ) );
		if (rs.wasNull()) {
			dto.setMafeeNull( true );
		}
		
		dto.setFfee( rs.getInt( COLUMN_FFEE ) );
		if (rs.wasNull()) {
			dto.setFfeeNull( true );
		}
		
		dto.setDctype( rs.getString( COLUMN_DCTYPE ) );
		dto.setCheckComplete( rs.getInt( COLUMN_CHECK_COMPLETE ) );
		dto.setWitnessComplete( rs.getInt( COLUMN_WITNESS_COMPLETE ) );
		dto.setPartyComplete( rs.getInt( COLUMN_PARTY_COMPLETE ) );
		dto.setLandComplete( rs.getInt( COLUMN_LAND_COMPLETE ) );
		dto.setLandRelated( rs.getInt( COLUMN_LAND_RELATED ) );
		dto.setDistrictCode( rs.getString( COLUMN_DISTRICT_CODE ) );
		dto.setSroCode( rs.getString( COLUMN_SRO_CODE ) );
		dto.setRegFee( rs.getInt( COLUMN_REG_FEE ) );
		if (rs.wasNull()) {
			dto.setRegFeeNull( true );
		}
		
		dto.setOtherFee( rs.getInt( COLUMN_OTHER_FEE ) );
		if (rs.wasNull()) {
			dto.setOtherFeeNull( true );
		}
		
		dto.setRegRecieptNo( rs.getString( COLUMN_REG_RECIEPT_NO ) );
		dto.setRegRecieptDate( rs.getDate(COLUMN_REG_RECIEPT_DATE ) );
		dto.setSubDeedType( rs.getString( COLUMN_SUB_DEED_TYPE ) );
		dto.setAreaType( rs.getString( COLUMN_AREA_TYPE ) );
		dto.setBookindex( rs.getString( COLUMN_BOOKINDEX ) );
		dto.setRoComplete( rs.getInt( COLUMN_RO_COMPLETE ) );
		dto.setScnCmplt( rs.getInt( COLUMN_SCN_CMPLT ) );
		dto.setRoAuthentication( rs.getInt( COLUMN_RO_AUTHENTICATION ) );
		dto.setRejection( rs.getInt( COLUMN_REJECTION ) );
		dto.setDocScanComplete( rs.getInt( COLUMN_DOC_SCAN_COMPLETE ) );
		dto.setFngrScanCmplt( rs.getInt( COLUMN_FNGR_SCAN_CMPLT ) );
		dto.setImgScanCmplt( rs.getInt( COLUMN_IMG_SCAN_CMPLT ) );
		dto.setWhetherOldDoc( rs.getInt( COLUMN_WHETHER_OLD_DOC ) );
		dto.setTypeOfReg( rs.getString( COLUMN_TYPE_OF_REG ) );
		dto.setDocPending( rs.getInt( COLUMN_DOC_PENDING ) );
		dto.setIssueDate( rs.getDate(COLUMN_ISSUE_DATE ) );
		dto.setSrntPen( rs.getInt( COLUMN_SRNT_PEN ) );
		dto.setImpoundDoc( rs.getInt( COLUMN_IMPOUND_DOC ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Docdetail dto)
	{
	}

	/** 
	 * Returns all rows from the docdetail table that match the specified arbitrary SQL statement
	 */
	public Docdetail[] findByDynamicSelect(String sql, Object[] sqlParams) throws DocdetailDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the docdetail table that match the specified arbitrary SQL statement
	 */
	public Docdetail[] findByDynamicWhere(String sql, Object[] sqlParams) throws DocdetailDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

        public String CustomDynamicSelect1(String sql, Object[] sqlParams) throws DocdetailDaoException           {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
       
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
       
            // construct the SQL statement
            final String SQL = sql;
       
       
            System.out.println( "Executing " + SQL );
            // prepare statement
            stmt = conn.prepareStatement( SQL );
            stmt.setMaxRows( maxRows );
       
            // bind parameters
            for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
                stmt.setObject( i+1, sqlParams[i] );
            }
       
       
            rs = stmt.executeQuery();
                       
                        String ret=null;
                        while (rs.next()) {
                                ret = rs.getString(1);
                                System.out.println("VOLUMES"+ret);
                        }

                        return ret;
                       
        }
        catch (Exception _e) {
            _e.printStackTrace();
            throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
        }
        finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }
       
        }
       
    }
        public int customDynamicSelect2(String sql, Object[] sqlParams) throws DocdetailDaoException {
            // declare variables
            final boolean isConnSupplied = (userConn != null);
            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;

            try {
                
                conn = isConnSupplied ? userConn : ResourceManager.getConnection();
                final String SQL = sql;
                System.out.println( "Executing " + SQL );
                stmt = conn.prepareStatement( SQL );
                stmt.setMaxRows( maxRows );
                for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
                    stmt.setObject( i+1, sqlParams[i] );
                }
                rs = stmt.executeQuery();
                int ret=0;
                while (rs.next()) {
                    ret = rs.getInt(1);
                }
               return ret;
            }
            catch (Exception _e) {
                _e.printStackTrace();
                throw new DocdetailDaoException( "Exception: " + _e.getMessage(), _e );
            }
            finally {
                ResourceManager.close(rs);
                ResourceManager.close(stmt);
                if (!isConnSupplied) {
                    ResourceManager.close(conn);
                }

            }
       
        }
        // @ to do  generalize a selection query 
}
