/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class NodalOfficersDaoImpl extends AbstractDAO implements NodalOfficersDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT officer_id, office_id, name, userid, password, email, mobile_number FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( officer_id, office_id, name, userid, password, email, mobile_number ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET officer_id = ?, office_id = ?, name = ?, userid = ?, password = ?, email = ?, mobile_number = ? WHERE officer_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE officer_id = ?";

	/** 
	 * Index of column officer_id
	 */
	protected static final int COLUMN_OFFICER_ID = 1;

	/** 
	 * Index of column office_id
	 */
	protected static final int COLUMN_OFFICE_ID = 2;

	/** 
	 * Index of column name
	 */
	protected static final int COLUMN_NAME = 3;

	/** 
	 * Index of column userid
	 */
	protected static final int COLUMN_USERID = 4;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 5;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 6;

	/** 
	 * Index of column mobile_number
	 */
	protected static final int COLUMN_MOBILE_NUMBER = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column officer_id
	 */
	protected static final int PK_COLUMN_OFFICER_ID = 1;

	/** 
	 * Inserts a new row in the nodal_officers table.
	 */
	public NodalOfficersPk insert(NodalOfficers dto) throws NodalOfficersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getOfficerId() );
			stmt.setInt( index++, dto.getOfficeId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getUserid() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getMobileNumber() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setOfficerId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NodalOfficersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the nodal_officers table.
	 */
	public void update(NodalOfficersPk pk, NodalOfficers dto) throws NodalOfficersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getOfficerId() );
			stmt.setInt( index++, dto.getOfficeId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getUserid() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getMobileNumber() );
			stmt.setInt( 8, pk.getOfficerId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NodalOfficersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the nodal_officers table.
	 */
	public void delete(NodalOfficersPk pk) throws NodalOfficersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getOfficerId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NodalOfficersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the nodal_officers table that matches the specified primary-key value.
	 */
	public NodalOfficers findByPrimaryKey(NodalOfficersPk pk) throws NodalOfficersDaoException
	{
		return findByPrimaryKey( pk.getOfficerId() );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'officer_id = :officerId'.
	 */
	public NodalOfficers findByPrimaryKey(int officerId) throws NodalOfficersDaoException
	{
		NodalOfficers ret[] = findByDynamicSelect( SQL_SELECT + " WHERE officer_id = ?", new Object[] {  new Integer(officerId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria ''.
	 */
	public NodalOfficers[] findAll() throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY officer_id", null );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'officer_id = :officerId'.
	 */
	public NodalOfficers[] findWhereOfficerIdEquals(int officerId) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE officer_id = ? ORDER BY officer_id", new Object[] {  new Integer(officerId) } );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'office_id = :officeId'.
	 */
	public NodalOfficers[] findWhereOfficeIdEquals(int officeId) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE office_id = ? ORDER BY office_id", new Object[] {  new Integer(officeId) } );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'name = :name'.
	 */
	public NodalOfficers[] findWhereNameEquals(String name) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name = ? ORDER BY name", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'userid = :userid'.
	 */
	public NodalOfficers[] findWhereUseridEquals(String userid) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE userid = ? ORDER BY userid", new Object[] { userid } );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'password = :password'.
	 */
	public NodalOfficers[] findWherePasswordEquals(String password) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'email = :email'.
	 */
	public NodalOfficers[] findWhereEmailEquals(String email) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email = ? ORDER BY email", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'mobile_number = :mobileNumber'.
	 */
	public NodalOfficers[] findWhereMobileNumberEquals(String mobileNumber) throws NodalOfficersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mobile_number = ? ORDER BY mobile_number", new Object[] { mobileNumber } );
	}

	/**
	 * Method 'NodalOfficersDaoImpl'
	 * 
	 */
	public NodalOfficersDaoImpl()
	{
	}

	/**
	 * Method 'NodalOfficersDaoImpl'
	 * 
	 * @param userConn
	 */
	public NodalOfficersDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "nodal_officers";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected NodalOfficers fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			NodalOfficers dto = new NodalOfficers();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected NodalOfficers[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			NodalOfficers dto = new NodalOfficers();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		NodalOfficers ret[] = new NodalOfficers[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(NodalOfficers dto, ResultSet rs) throws SQLException
	{
		dto.setOfficerId( rs.getInt( COLUMN_OFFICER_ID ) );
		dto.setOfficeId( rs.getInt( COLUMN_OFFICE_ID ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setUserid( rs.getString( COLUMN_USERID ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setMobileNumber( rs.getString( COLUMN_MOBILE_NUMBER ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(NodalOfficers dto)
	{
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the specified arbitrary SQL statement
	 */
	public NodalOfficers[] findByDynamicSelect(String sql, Object[] sqlParams) throws NodalOfficersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NodalOfficersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the nodal_officers table that match the specified arbitrary SQL statement
	 */
	public NodalOfficers[] findByDynamicWhere(String sql, Object[] sqlParams) throws NodalOfficersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NodalOfficersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
