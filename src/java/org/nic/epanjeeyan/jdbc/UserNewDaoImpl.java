/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UserNewDaoImpl extends AbstractDAO implements UserNewDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT userid, username, password, password1, password2, password3, password4, designation, operator, accountant, ro, assistant, admin, helpdesk FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( userid, username, password, password1, password2, password3, password4, designation, operator, accountant, ro, assistant, admin, helpdesk ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET userid = ?, username = ?, password = ?, password1 = ?, password2 = ?, password3 = ?, password4 = ?, designation = ?, operator = ?, accountant = ?, ro = ?, assistant = ?, admin = ?, helpdesk = ? WHERE userid = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE userid = ?";

	/** 
	 * Index of column userid
	 */
	protected static final int COLUMN_USERID = 1;

	/** 
	 * Index of column username
	 */
	protected static final int COLUMN_USERNAME = 2;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 3;

	/** 
	 * Index of column password1
	 */
	protected static final int COLUMN_PASSWORD1 = 4;

	/** 
	 * Index of column password2
	 */
	protected static final int COLUMN_PASSWORD2 = 5;

	/** 
	 * Index of column password3
	 */
	protected static final int COLUMN_PASSWORD3 = 6;

	/** 
	 * Index of column password4
	 */
	protected static final int COLUMN_PASSWORD4 = 7;

	/** 
	 * Index of column designation
	 */
	protected static final int COLUMN_DESIGNATION = 8;

	/** 
	 * Index of column operator
	 */
	protected static final int COLUMN_OPERATOR = 9;

	/** 
	 * Index of column accountant
	 */
	protected static final int COLUMN_ACCOUNTANT = 10;

	/** 
	 * Index of column ro
	 */
	protected static final int COLUMN_RO = 11;

	/** 
	 * Index of column assistant
	 */
	protected static final int COLUMN_ASSISTANT = 12;

	/** 
	 * Index of column admin
	 */
	protected static final int COLUMN_ADMIN = 13;

	/** 
	 * Index of column helpdesk
	 */
	protected static final int COLUMN_HELPDESK = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column userid
	 */
	protected static final int PK_COLUMN_USERID = 1;

	/** 
	 * Inserts a new row in the user_new table.
	 */
	public UserNewPk insert(UserNew dto) throws UserNewDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getUserid() );
			stmt.setString( index++, dto.getUsername() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getPassword1() );
			stmt.setString( index++, dto.getPassword2() );
			stmt.setString( index++, dto.getPassword3() );
			stmt.setString( index++, dto.getPassword4() );
			stmt.setString( index++, dto.getDesignation() );
			stmt.setInt( index++, dto.getOperator() );
			stmt.setInt( index++, dto.getAccountant() );
			stmt.setInt( index++, dto.getRo() );
			stmt.setInt( index++, dto.getAssistant() );
			stmt.setInt( index++, dto.getAdmin() );
			stmt.setInt( index++, dto.getHelpdesk() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the user_new table.
	 */
	public void update(UserNewPk pk, UserNew dto) throws UserNewDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getUserid() );
			stmt.setString( index++, dto.getUsername() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getPassword1() );
			stmt.setString( index++, dto.getPassword2() );
			stmt.setString( index++, dto.getPassword3() );
			stmt.setString( index++, dto.getPassword4() );
			stmt.setString( index++, dto.getDesignation() );
			stmt.setInt( index++, dto.getOperator() );
			stmt.setInt( index++, dto.getAccountant() );
			stmt.setInt( index++, dto.getRo() );
			stmt.setInt( index++, dto.getAssistant() );
			stmt.setInt( index++, dto.getAdmin() );
			stmt.setInt( index++, dto.getHelpdesk() );
			stmt.setString( 15, pk.getUserid() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the user_new table.
	 */
	public void delete(UserNewPk pk) throws UserNewDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getUserid() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the user_new table that matches the specified primary-key value.
	 */
	public UserNew findByPrimaryKey(UserNewPk pk) throws UserNewDaoException
	{
		return findByPrimaryKey( pk.getUserid() );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'userid = :userid'.
	 */
	public UserNew findByPrimaryKey(String userid) throws UserNewDaoException
	{
		UserNew ret[] = findByDynamicSelect( SQL_SELECT + " WHERE userid = ?", new Object[] { userid } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria ''.
	 */
	public UserNew[] findAll() throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY userid", null );
	}
        
        public UserNew[] pageAll(Integer offset,Integer num) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY userid limit "
                 + num + " offset " + offset , null );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'userid = :userid'.
	 */
	public UserNew[] findWhereUseridEquals(String userid) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE userid = ? ORDER BY userid", new Object[] { userid } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'username = :username'.
	 */
	public UserNew[] findWhereUsernameEquals(String username) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE username = ? ORDER BY username", new Object[] { username } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password = :password'.
	 */
	public UserNew[] findWherePasswordEquals(String password) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password1 = :password1'.
	 */
	public UserNew[] findWherePassword1Equals(String password1) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password1 = ? ORDER BY password1", new Object[] { password1 } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password2 = :password2'.
	 */
	public UserNew[] findWherePassword2Equals(String password2) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password2 = ? ORDER BY password2", new Object[] { password2 } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password3 = :password3'.
	 */
	public UserNew[] findWherePassword3Equals(String password3) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password3 = ? ORDER BY password3", new Object[] { password3 } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password4 = :password4'.
	 */
	public UserNew[] findWherePassword4Equals(String password4) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password4 = ? ORDER BY password4", new Object[] { password4 } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'designation = :designation'.
	 */
	public UserNew[] findWhereDesignationEquals(String designation) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE designation = ? ORDER BY designation", new Object[] { designation } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'operator = :operator'.
	 */
	public UserNew[] findWhereOperatorEquals(int operator) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE operator = ? ORDER BY operator", new Object[] {  new Integer(operator) } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'accountant = :accountant'.
	 */
	public UserNew[] findWhereAccountantEquals(int accountant) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE accountant = ? ORDER BY accountant", new Object[] {  new Integer(accountant) } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'ro = :ro'.
	 */
	public UserNew[] findWhereRoEquals(int ro) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ro = ? ORDER BY ro", new Object[] {  new Integer(ro) } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'assistant = :assistant'.
	 */
	public UserNew[] findWhereAssistantEquals(int assistant) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE assistant = ? ORDER BY assistant", new Object[] {  new Integer(assistant) } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'admin = :admin'.
	 */
	public UserNew[] findWhereAdminEquals(int admin) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE admin = ? ORDER BY admin", new Object[] {  new Integer(admin) } );
	}

	/** 
	 * Returns all rows from the user_new table that match the criteria 'helpdesk = :helpdesk'.
	 */
	public UserNew[] findWhereHelpdeskEquals(int helpdesk) throws UserNewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE helpdesk = ? ORDER BY helpdesk", new Object[] {  new Integer(helpdesk) } );
	}

	/**
	 * Method 'UserNewDaoImpl'
	 * 
	 */
	public UserNewDaoImpl()
	{
	}

	/**
	 * Method 'UserNewDaoImpl'
	 * 
	 * @param userConn
	 */
	public UserNewDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "user_new";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected UserNew fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			UserNew dto = new UserNew();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected UserNew[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			UserNew dto = new UserNew();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		UserNew ret[] = new UserNew[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(UserNew dto, ResultSet rs) throws SQLException
	{
		dto.setUserid( rs.getString( COLUMN_USERID ) );
		dto.setUsername( rs.getString( COLUMN_USERNAME ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setPassword1( rs.getString( COLUMN_PASSWORD1 ) );
		dto.setPassword2( rs.getString( COLUMN_PASSWORD2 ) );
		dto.setPassword3( rs.getString( COLUMN_PASSWORD3 ) );
		dto.setPassword4( rs.getString( COLUMN_PASSWORD4 ) );
		dto.setDesignation( rs.getString( COLUMN_DESIGNATION ) );
		dto.setOperator( rs.getInt( COLUMN_OPERATOR ) );
		dto.setAccountant( rs.getInt( COLUMN_ACCOUNTANT ) );
		dto.setRo( rs.getInt( COLUMN_RO ) );
		dto.setAssistant( rs.getInt( COLUMN_ASSISTANT ) );
		dto.setAdmin( rs.getInt( COLUMN_ADMIN ) );
		dto.setHelpdesk( rs.getInt( COLUMN_HELPDESK ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(UserNew dto)
	{
	}

	/** 
	 * Returns all rows from the user_new table that match the specified arbitrary SQL statement
	 */
	public UserNew[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserNewDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the user_new table that match the specified arbitrary SQL statement
	 */
	public UserNew[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserNewDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
public String CustomDynamicSelect1(String sql, Object[] sqlParams) throws UserNewDaoException           {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
       
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
       
            // construct the SQL statement
            final String SQL = sql;
       
       
            System.out.println( "Executing " + SQL );
            // prepare statement
            stmt = conn.prepareStatement( SQL );
            stmt.setMaxRows( maxRows );
       
            // bind parameters
            for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
                stmt.setObject( i+1, sqlParams[i] );
            }
       
       
            rs = stmt.executeQuery();
                       
                        String ret=null;
                        while (rs.next()) {
                                ret = rs.getString(1);
                        }

                        return ret;
                       
        }
        catch (Exception _e) {
            _e.printStackTrace();
            throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
        }
        finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }
       
        }
       
    }
  public Integer CustomDynamicSelect(String sql, Object[] sqlParams) throws UserNewDaoException           {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
       
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
       
            // construct the SQL statement
            final String SQL = sql;
       
       
            System.out.println( "Executing " + SQL );
            // prepare statement
            stmt = conn.prepareStatement( SQL );
            stmt.setMaxRows( maxRows );
       
            // bind parameters
            for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
                stmt.setObject( i+1, sqlParams[i] );
            }
       
       
            rs = stmt.executeQuery();
                       
                        Integer ret=null;
                        while (rs.next()) {
                                ret = rs.getInt(1);
                        }

                        return ret;
                       
        }
        catch (Exception _e) {
            _e.printStackTrace();
            throw new UserNewDaoException( "Exception: " + _e.getMessage(), _e );
        }
        finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }
       
        }
       
    }     
}
