/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class LandFeeDaoImpl extends AbstractDAO implements LandFeeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT gender, fee, urban_mc, urban_mb, rural_fee FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( gender, fee, urban_mc, urban_mb, rural_fee ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * Index of column gender
	 */
	protected static final int COLUMN_GENDER = 1;

	/** 
	 * Index of column fee
	 */
	protected static final int COLUMN_FEE = 2;

	/** 
	 * Index of column urban_mc
	 */
	protected static final int COLUMN_URBAN_MC = 3;

	/** 
	 * Index of column urban_mb
	 */
	protected static final int COLUMN_URBAN_MB = 4;

	/** 
	 * Index of column rural_fee
	 */
	protected static final int COLUMN_RURAL_FEE = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Inserts a new row in the land_fee table.
	 */
	public void insert(LandFee dto) throws LandFeeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getGender() );
			stmt.setInt( index++, dto.getFee() );
			stmt.setInt( index++, dto.getUrbanMc() );
			stmt.setInt( index++, dto.getUrbanMb() );
			stmt.setInt( index++, dto.getRuralFee() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandFeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the land_fee table that match the criteria ''.
	 */
	public LandFee[] findAll() throws LandFeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the land_fee table that match the criteria 'gender = :gender'.
	 */
	public LandFee[] findWhereGenderEquals(String gender) throws LandFeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE gender = ? ORDER BY gender", new Object[] { gender } );
	}

	/** 
	 * Returns all rows from the land_fee table that match the criteria 'fee = :fee'.
	 */
	public LandFee[] findWhereFeeEquals(int fee) throws LandFeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fee = ? ORDER BY fee", new Object[] {  new Integer(fee) } );
	}

	/** 
	 * Returns all rows from the land_fee table that match the criteria 'urban_mc = :urbanMc'.
	 */
	public LandFee[] findWhereUrbanMcEquals(int urbanMc) throws LandFeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE urban_mc = ? ORDER BY urban_mc", new Object[] {  new Integer(urbanMc) } );
	}

	/** 
	 * Returns all rows from the land_fee table that match the criteria 'urban_mb = :urbanMb'.
	 */
	public LandFee[] findWhereUrbanMbEquals(int urbanMb) throws LandFeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE urban_mb = ? ORDER BY urban_mb", new Object[] {  new Integer(urbanMb) } );
	}

	/** 
	 * Returns all rows from the land_fee table that match the criteria 'rural_fee = :ruralFee'.
	 */
	public LandFee[] findWhereRuralFeeEquals(int ruralFee) throws LandFeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rural_fee = ? ORDER BY rural_fee", new Object[] {  new Integer(ruralFee) } );
	}

	/**
	 * Method 'LandFeeDaoImpl'
	 * 
	 */
	public LandFeeDaoImpl()
	{
	}

	/**
	 * Method 'LandFeeDaoImpl'
	 * 
	 * @param userConn
	 */
	public LandFeeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "land_fee";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected LandFee fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			LandFee dto = new LandFee();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected LandFee[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			LandFee dto = new LandFee();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		LandFee ret[] = new LandFee[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(LandFee dto, ResultSet rs) throws SQLException
	{
		dto.setGender( rs.getString( COLUMN_GENDER ) );
		dto.setFee( rs.getInt( COLUMN_FEE ) );
		dto.setUrbanMc( rs.getInt( COLUMN_URBAN_MC ) );
		dto.setUrbanMb( rs.getInt( COLUMN_URBAN_MB ) );
		dto.setRuralFee( rs.getInt( COLUMN_RURAL_FEE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(LandFee dto)
	{
	}

	/** 
	 * Returns all rows from the land_fee table that match the specified arbitrary SQL statement
	 */
	public LandFee[] findByDynamicSelect(String sql, Object[] sqlParams) throws LandFeeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandFeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the land_fee table that match the specified arbitrary SQL statement
	 */
	public LandFee[] findByDynamicWhere(String sql, Object[] sqlParams) throws LandFeeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandFeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
