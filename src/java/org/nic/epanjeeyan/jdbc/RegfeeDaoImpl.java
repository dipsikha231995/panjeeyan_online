/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RegfeeDaoImpl extends AbstractDAO implements RegfeeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT amt1, amt2, amount, stampamt FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( amt1, amt2, amount, stampamt ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * Index of column amt1
	 */
	protected static final int COLUMN_AMT1 = 1;

	/** 
	 * Index of column amt2
	 */
	protected static final int COLUMN_AMT2 = 2;

	/** 
	 * Index of column amount
	 */
	protected static final int COLUMN_AMOUNT = 3;

	/** 
	 * Index of column stampamt
	 */
	protected static final int COLUMN_STAMPAMT = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Inserts a new row in the regfee table.
	 */
	public void insert(Regfee dto) throws RegfeeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getAmt1() );
			stmt.setInt( index++, dto.getAmt2() );
			stmt.setInt( index++, dto.getAmount() );
			if (dto.isStampamtNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStampamt() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegfeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET amt1 = ?, amt2 = ?, amount = ? WHERE amt1 = ?";

public void update(Regfee dto) throws RegfeeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt(index++, dto.getAmt1() );
			stmt.setInt(index++, dto.getAmt2() );
			stmt.setInt(index++, dto.getAmount() );
			
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegfeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the regfee table that match the criteria ''.
	 */
	public Regfee[] findAll() throws RegfeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}
public Regfee[] pageAll(Integer offset,Integer num) throws RegfeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " limit "
                 + num + " offset " + offset , null );
	}
	/** 
	 * Returns all rows from the regfee table that match the criteria 'amt1 = :amt1'.
	 */
	public Regfee[] findWhereAmt1Equals(int amt1) throws RegfeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE amt1 = ? ORDER BY amt1", new Object[] {  new Integer(amt1) } );
	}

	/** 
	 * Returns all rows from the regfee table that match the criteria 'amt2 = :amt2'.
	 */
	public Regfee[] findWhereAmt2Equals(int amt2) throws RegfeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE amt2 = ? ORDER BY amt2", new Object[] {  new Integer(amt2) } );
	}

	/** 
	 * Returns all rows from the regfee table that match the criteria 'amount = :amount'.
	 */
	public Regfee[] findWhereAmountEquals(int amount) throws RegfeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE amount = ? ORDER BY amount", new Object[] {  new Integer(amount) } );
	}

	/** 
	 * Returns all rows from the regfee table that match the criteria 'stampamt = :stampamt'.
	 */
	public Regfee[] findWhereStampamtEquals(int stampamt) throws RegfeeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stampamt = ? ORDER BY stampamt", new Object[] {  new Integer(stampamt) } );
	}

	/**
	 * Method 'RegfeeDaoImpl'
	 * 
	 */
	public RegfeeDaoImpl()
	{
	}

	/**
	 * Method 'RegfeeDaoImpl'
	 * 
	 * @param userConn
	 */
	public RegfeeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "regfee";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Regfee fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Regfee dto = new Regfee();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Regfee[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Regfee dto = new Regfee();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Regfee ret[] = new Regfee[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Regfee dto, ResultSet rs) throws SQLException
	{
		dto.setAmt1( rs.getInt( COLUMN_AMT1 ) );
		dto.setAmt2( rs.getInt( COLUMN_AMT2 ) );
		dto.setAmount( rs.getInt( COLUMN_AMOUNT ) );
		dto.setStampamt( rs.getInt( COLUMN_STAMPAMT ) );
		if (rs.wasNull()) {
			dto.setStampamtNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Regfee dto)
	{
	}
        protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE amt1 = ?";
        
        
        
        public void delete(Integer amt1) throws RegfeeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE  );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt(1, amt1 );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegfeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	/** 
	 * Returns all rows from the regfee table that match the specified arbitrary SQL statement
	 */
	public Regfee[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegfeeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegfeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the regfee table that match the specified arbitrary SQL statement
	 */
	public Regfee[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegfeeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegfeeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
   public Integer CustomDynamicSelect(String sql, Object[] sqlParams) throws RegfeeDaoException           {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
       
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
       
            // construct the SQL statement
            final String SQL = sql;
       
       
            System.out.println( "Executing " + SQL );
            // prepare statement
            stmt = conn.prepareStatement( SQL );
            stmt.setMaxRows( maxRows );
       
            // bind parameters
            for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
                stmt.setObject( i+1, sqlParams[i] );
            }
       
       
            rs = stmt.executeQuery();
                       
                        Integer ret=null;
                        while (rs.next()) {
                                ret = rs.getInt(1);
                        }

                        return ret;
                       
        }
        catch (Exception _e) {
            _e.printStackTrace();
            throw new RegfeeDaoException( "Exception: " + _e.getMessage(), _e );
        }
        finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }
       
        }
       
    }          
}

