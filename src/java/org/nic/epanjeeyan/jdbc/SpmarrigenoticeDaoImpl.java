/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SpmarrigenoticeDaoImpl extends AbstractDAO implements SpmarrigenoticeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT slno, nslno, dtappl, oldnew, nmappl, bridename, bridefather, bridevillage, brideps, bridepo, bridedistrict, bridestate, bridepin, brideVillPrmnt, bridePSPrmnt, bridePOPrmnt, brideDistPrmnt, brideStatePrmnt, bridePinPrmnt, brdLenRes, brideage, bridecondi, brideoccu, bgroomname, bgroomfather, bgroomvillage, bgroomps, bgroompo, bgroomdistrict, bgroomstate, bgroompin, grmVillPrmnt, grmPSPrmnt, grmPOPrmnt, grmDistPrmnt, grmStatePrmnt, grmPinPrmnt, grmLenRes, bgroomage, bgroomcondi, bgroomoccu, ntfee, certifee, datemp, district_code, sro_code, sro_name FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( slno, nslno, dtappl, oldnew, nmappl, bridename, bridefather, bridevillage, brideps, bridepo, bridedistrict, bridestate, bridepin, brideVillPrmnt, bridePSPrmnt, bridePOPrmnt, brideDistPrmnt, brideStatePrmnt, bridePinPrmnt, brdLenRes, brideage, bridecondi, brideoccu, bgroomname, bgroomfather, bgroomvillage, bgroomps, bgroompo, bgroomdistrict, bgroomstate, bgroompin, grmVillPrmnt, grmPSPrmnt, grmPOPrmnt, grmDistPrmnt, grmStatePrmnt, grmPinPrmnt, grmLenRes, bgroomage, bgroomcondi, bgroomoccu, ntfee, certifee, datemp, district_code, sro_code, sro_name ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET slno = ?, nslno = ?, dtappl = ?, oldnew = ?, nmappl = ?, bridename = ?, bridefather = ?, bridevillage = ?, brideps = ?, bridepo = ?, bridedistrict = ?, bridestate = ?, bridepin = ?, brideVillPrmnt = ?, bridePSPrmnt = ?, bridePOPrmnt = ?, brideDistPrmnt = ?, brideStatePrmnt = ?, bridePinPrmnt = ?, brdLenRes = ?, brideage = ?, bridecondi = ?, brideoccu = ?, bgroomname = ?, bgroomfather = ?, bgroomvillage = ?, bgroomps = ?, bgroompo = ?, bgroomdistrict = ?, bgroomstate = ?, bgroompin = ?, grmVillPrmnt = ?, grmPSPrmnt = ?, grmPOPrmnt = ?, grmDistPrmnt = ?, grmStatePrmnt = ?, grmPinPrmnt = ?, grmLenRes = ?, bgroomage = ?, bgroomcondi = ?, bgroomoccu = ?, ntfee = ?, certifee = ?, datemp = ?, district_code = ?, sro_code = ?, sro_name = ? WHERE nslno = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE nslno = ?";

	/** 
	 * Index of column slno
	 */
	protected static final int COLUMN_SLNO = 1;

	/** 
	 * Index of column nslno
	 */
	protected static final int COLUMN_NSLNO = 2;

	/** 
	 * Index of column dtappl
	 */
	protected static final int COLUMN_DTAPPL = 3;

	/** 
	 * Index of column oldnew
	 */
	protected static final int COLUMN_OLDNEW = 4;

	/** 
	 * Index of column nmappl
	 */
	protected static final int COLUMN_NMAPPL = 5;

	/** 
	 * Index of column bridename
	 */
	protected static final int COLUMN_BRIDENAME = 6;

	/** 
	 * Index of column bridefather
	 */
	protected static final int COLUMN_BRIDEFATHER = 7;

	/** 
	 * Index of column bridevillage
	 */
	protected static final int COLUMN_BRIDEVILLAGE = 8;

	/** 
	 * Index of column brideps
	 */
	protected static final int COLUMN_BRIDEPS = 9;

	/** 
	 * Index of column bridepo
	 */
	protected static final int COLUMN_BRIDEPO = 10;

	/** 
	 * Index of column bridedistrict
	 */
	protected static final int COLUMN_BRIDEDISTRICT = 11;

	/** 
	 * Index of column bridestate
	 */
	protected static final int COLUMN_BRIDESTATE = 12;

	/** 
	 * Index of column bridepin
	 */
	protected static final int COLUMN_BRIDEPIN = 13;

	/** 
	 * Index of column brideVillPrmnt
	 */
	protected static final int COLUMN_BRIDE_VILL_PRMNT = 14;

	/** 
	 * Index of column bridePSPrmnt
	 */
	protected static final int COLUMN_BRIDE_P_S_PRMNT = 15;

	/** 
	 * Index of column bridePOPrmnt
	 */
	protected static final int COLUMN_BRIDE_P_O_PRMNT = 16;

	/** 
	 * Index of column brideDistPrmnt
	 */
	protected static final int COLUMN_BRIDE_DIST_PRMNT = 17;

	/** 
	 * Index of column brideStatePrmnt
	 */
	protected static final int COLUMN_BRIDE_STATE_PRMNT = 18;

	/** 
	 * Index of column bridePinPrmnt
	 */
	protected static final int COLUMN_BRIDE_PIN_PRMNT = 19;

	/** 
	 * Index of column brdLenRes
	 */
	protected static final int COLUMN_BRD_LEN_RES = 20;

	/** 
	 * Index of column brideage
	 */
	protected static final int COLUMN_BRIDEAGE = 21;

	/** 
	 * Index of column bridecondi
	 */
	protected static final int COLUMN_BRIDECONDI = 22;

	/** 
	 * Index of column brideoccu
	 */
	protected static final int COLUMN_BRIDEOCCU = 23;

	/** 
	 * Index of column bgroomname
	 */
	protected static final int COLUMN_BGROOMNAME = 24;

	/** 
	 * Index of column bgroomfather
	 */
	protected static final int COLUMN_BGROOMFATHER = 25;

	/** 
	 * Index of column bgroomvillage
	 */
	protected static final int COLUMN_BGROOMVILLAGE = 26;

	/** 
	 * Index of column bgroomps
	 */
	protected static final int COLUMN_BGROOMPS = 27;

	/** 
	 * Index of column bgroompo
	 */
	protected static final int COLUMN_BGROOMPO = 28;

	/** 
	 * Index of column bgroomdistrict
	 */
	protected static final int COLUMN_BGROOMDISTRICT = 29;

	/** 
	 * Index of column bgroomstate
	 */
	protected static final int COLUMN_BGROOMSTATE = 30;

	/** 
	 * Index of column bgroompin
	 */
	protected static final int COLUMN_BGROOMPIN = 31;

	/** 
	 * Index of column grmVillPrmnt
	 */
	protected static final int COLUMN_GRM_VILL_PRMNT = 32;

	/** 
	 * Index of column grmPSPrmnt
	 */
	protected static final int COLUMN_GRM_P_S_PRMNT = 33;

	/** 
	 * Index of column grmPOPrmnt
	 */
	protected static final int COLUMN_GRM_P_O_PRMNT = 34;

	/** 
	 * Index of column grmDistPrmnt
	 */
	protected static final int COLUMN_GRM_DIST_PRMNT = 35;

	/** 
	 * Index of column grmStatePrmnt
	 */
	protected static final int COLUMN_GRM_STATE_PRMNT = 36;

	/** 
	 * Index of column grmPinPrmnt
	 */
	protected static final int COLUMN_GRM_PIN_PRMNT = 37;

	/** 
	 * Index of column grmLenRes
	 */
	protected static final int COLUMN_GRM_LEN_RES = 38;

	/** 
	 * Index of column bgroomage
	 */
	protected static final int COLUMN_BGROOMAGE = 39;

	/** 
	 * Index of column bgroomcondi
	 */
	protected static final int COLUMN_BGROOMCONDI = 40;

	/** 
	 * Index of column bgroomoccu
	 */
	protected static final int COLUMN_BGROOMOCCU = 41;

	/** 
	 * Index of column ntfee
	 */
	protected static final int COLUMN_NTFEE = 42;

	/** 
	 * Index of column certifee
	 */
	protected static final int COLUMN_CERTIFEE = 43;

	/** 
	 * Index of column datemp
	 */
	protected static final int COLUMN_DATEMP = 44;

	/** 
	 * Index of column district_code
	 */
	protected static final int COLUMN_DISTRICT_CODE = 45;

	/** 
	 * Index of column sro_code
	 */
	protected static final int COLUMN_SRO_CODE = 46;

	/** 
	 * Index of column sro_name
	 */
	protected static final int COLUMN_SRO_NAME = 47;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 47;

	/** 
	 * Index of primary-key column nslno
	 */
	protected static final int PK_COLUMN_NSLNO = 1;

	/** 
	 * Inserts a new row in the spmarrigenotice table.
	 */
	public SpmarrigenoticePk insert(Spmarrigenotice dto) throws SpmarrigenoticeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.isSlnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSlno() );
			}
		
			stmt.setString( index++, dto.getNslno() );
			stmt.setDate(index++, dto.getDtappl()==null ? null : new java.sql.Date( dto.getDtappl().getTime() ) );
			stmt.setString( index++, dto.getOldnew() );
			stmt.setString( index++, dto.getNmappl() );
			stmt.setString( index++, dto.getBridename() );
			stmt.setString( index++, dto.getBridefather() );
			stmt.setString( index++, dto.getBridevillage() );
			stmt.setString( index++, dto.getBrideps() );
			stmt.setString( index++, dto.getBridepo() );
			stmt.setString( index++, dto.getBridedistrict() );
			stmt.setString( index++, dto.getBridestate() );
			if (dto.isBridepinNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBridepin() );
			}
		
			stmt.setString( index++, dto.getBrideVillPrmnt() );
			stmt.setString( index++, dto.getBridePSPrmnt() );
			stmt.setString( index++, dto.getBridePOPrmnt() );
			stmt.setString( index++, dto.getBrideDistPrmnt() );
			stmt.setString( index++, dto.getBrideStatePrmnt() );
			if (dto.isBridePinPrmntNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBridePinPrmnt() );
			}
		
			stmt.setString( index++, dto.getBrdLenRes() );
			if (dto.isBrideageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBrideage() );
			}
		
			stmt.setString( index++, dto.getBridecondi() );
			stmt.setString( index++, dto.getBrideoccu() );
			stmt.setString( index++, dto.getBgroomname() );
			stmt.setString( index++, dto.getBgroomfather() );
			stmt.setString( index++, dto.getBgroomvillage() );
			stmt.setString( index++, dto.getBgroomps() );
			stmt.setString( index++, dto.getBgroompo() );
			stmt.setString( index++, dto.getBgroomdistrict() );
			stmt.setString( index++, dto.getBgroomstate() );
			if (dto.isBgroompinNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBgroompin() );
			}
		
			stmt.setString( index++, dto.getGrmVillPrmnt() );
			stmt.setString( index++, dto.getGrmPSPrmnt() );
			stmt.setString( index++, dto.getGrmPOPrmnt() );
			stmt.setString( index++, dto.getGrmDistPrmnt() );
			stmt.setString( index++, dto.getGrmStatePrmnt() );
			if (dto.isGrmPinPrmntNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGrmPinPrmnt() );
			}
		
			stmt.setString( index++, dto.getGrmLenRes() );
			if (dto.isBgroomageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBgroomage() );
			}
		
			stmt.setString( index++, dto.getBgroomcondi() );
			stmt.setString( index++, dto.getBgroomoccu() );
			if (dto.isNtfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getNtfee() );
			}
		
			if (dto.isCertifeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCertifee() );
			}
		
			stmt.setDate(index++, dto.getDatemp()==null ? null : new java.sql.Date( dto.getDatemp().getTime() ) );
			stmt.setString( index++, dto.getDistrictCode() );
			stmt.setString( index++, dto.getSroCode() );
			stmt.setString( index++, dto.getSroName() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SpmarrigenoticeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the spmarrigenotice table.
	 */
	public void update(SpmarrigenoticePk pk, Spmarrigenotice dto) throws SpmarrigenoticeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.isSlnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSlno() );
			}
		
			stmt.setString( index++, dto.getNslno() );
			stmt.setDate(index++, dto.getDtappl()==null ? null : new java.sql.Date( dto.getDtappl().getTime() ) );
			stmt.setString( index++, dto.getOldnew() );
			stmt.setString( index++, dto.getNmappl() );
			stmt.setString( index++, dto.getBridename() );
			stmt.setString( index++, dto.getBridefather() );
			stmt.setString( index++, dto.getBridevillage() );
			stmt.setString( index++, dto.getBrideps() );
			stmt.setString( index++, dto.getBridepo() );
			stmt.setString( index++, dto.getBridedistrict() );
			stmt.setString( index++, dto.getBridestate() );
			if (dto.isBridepinNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBridepin() );
			}
		
			stmt.setString( index++, dto.getBrideVillPrmnt() );
			stmt.setString( index++, dto.getBridePSPrmnt() );
			stmt.setString( index++, dto.getBridePOPrmnt() );
			stmt.setString( index++, dto.getBrideDistPrmnt() );
			stmt.setString( index++, dto.getBrideStatePrmnt() );
			if (dto.isBridePinPrmntNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBridePinPrmnt() );
			}
		
			stmt.setString( index++, dto.getBrdLenRes() );
			if (dto.isBrideageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBrideage() );
			}
		
			stmt.setString( index++, dto.getBridecondi() );
			stmt.setString( index++, dto.getBrideoccu() );
			stmt.setString( index++, dto.getBgroomname() );
			stmt.setString( index++, dto.getBgroomfather() );
			stmt.setString( index++, dto.getBgroomvillage() );
			stmt.setString( index++, dto.getBgroomps() );
			stmt.setString( index++, dto.getBgroompo() );
			stmt.setString( index++, dto.getBgroomdistrict() );
			stmt.setString( index++, dto.getBgroomstate() );
			if (dto.isBgroompinNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBgroompin() );
			}
		
			stmt.setString( index++, dto.getGrmVillPrmnt() );
			stmt.setString( index++, dto.getGrmPSPrmnt() );
			stmt.setString( index++, dto.getGrmPOPrmnt() );
			stmt.setString( index++, dto.getGrmDistPrmnt() );
			stmt.setString( index++, dto.getGrmStatePrmnt() );
			if (dto.isGrmPinPrmntNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getGrmPinPrmnt() );
			}
		
			stmt.setString( index++, dto.getGrmLenRes() );
			if (dto.isBgroomageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBgroomage() );
			}
		
			stmt.setString( index++, dto.getBgroomcondi() );
			stmt.setString( index++, dto.getBgroomoccu() );
			if (dto.isNtfeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getNtfee() );
			}
		
			if (dto.isCertifeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCertifee() );
			}
		
			stmt.setDate(index++, dto.getDatemp()==null ? null : new java.sql.Date( dto.getDatemp().getTime() ) );
			stmt.setString( index++, dto.getDistrictCode() );
			stmt.setString( index++, dto.getSroCode() );
			stmt.setString( index++, dto.getSroName() );
			stmt.setString( 48, pk.getNslno() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SpmarrigenoticeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the spmarrigenotice table.
	 */
	public void delete(SpmarrigenoticePk pk) throws SpmarrigenoticeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getNslno() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SpmarrigenoticeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the spmarrigenotice table that matches the specified primary-key value.
	 */
	public Spmarrigenotice findByPrimaryKey(SpmarrigenoticePk pk) throws SpmarrigenoticeDaoException
	{
		return findByPrimaryKey( pk.getNslno() );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'nslno = :nslno'.
	 */
	public Spmarrigenotice findByPrimaryKey(String nslno) throws SpmarrigenoticeDaoException
	{
		Spmarrigenotice ret[] = findByDynamicSelect( SQL_SELECT + " WHERE nslno = ?", new Object[] { nslno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria ''.
	 */
	public Spmarrigenotice[] findAll() throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY nslno", null );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'slno = :slno'.
	 */
	public Spmarrigenotice[] findWhereSlnoEquals(int slno) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE slno = ? ORDER BY slno", new Object[] {  new Integer(slno) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'nslno = :nslno'.
	 */
	public Spmarrigenotice[] findWhereNslnoEquals(String nslno) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nslno = ? ORDER BY nslno", new Object[] { nslno } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'dtappl = :dtappl'.
	 */
	public Spmarrigenotice[] findWhereDtapplEquals(Date dtappl) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dtappl = ? ORDER BY dtappl", new Object[] { dtappl==null ? null : new java.sql.Date( dtappl.getTime() ) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'oldnew = :oldnew'.
	 */
	public Spmarrigenotice[] findWhereOldnewEquals(String oldnew) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE oldnew = ? ORDER BY oldnew", new Object[] { oldnew } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'nmappl = :nmappl'.
	 */
	public Spmarrigenotice[] findWhereNmapplEquals(String nmappl) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nmappl = ? ORDER BY nmappl", new Object[] { nmappl } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridename = :bridename'.
	 */
	public Spmarrigenotice[] findWhereBridenameEquals(String bridename) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridename = ? ORDER BY bridename", new Object[] { bridename } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridefather = :bridefather'.
	 */
	public Spmarrigenotice[] findWhereBridefatherEquals(String bridefather) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridefather = ? ORDER BY bridefather", new Object[] { bridefather } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridevillage = :bridevillage'.
	 */
	public Spmarrigenotice[] findWhereBridevillageEquals(String bridevillage) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridevillage = ? ORDER BY bridevillage", new Object[] { bridevillage } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideps = :brideps'.
	 */
	public Spmarrigenotice[] findWhereBridepsEquals(String brideps) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brideps = ? ORDER BY brideps", new Object[] { brideps } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridepo = :bridepo'.
	 */
	public Spmarrigenotice[] findWhereBridepoEquals(String bridepo) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridepo = ? ORDER BY bridepo", new Object[] { bridepo } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridedistrict = :bridedistrict'.
	 */
	public Spmarrigenotice[] findWhereBridedistrictEquals(String bridedistrict) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridedistrict = ? ORDER BY bridedistrict", new Object[] { bridedistrict } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridestate = :bridestate'.
	 */
	public Spmarrigenotice[] findWhereBridestateEquals(String bridestate) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridestate = ? ORDER BY bridestate", new Object[] { bridestate } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridepin = :bridepin'.
	 */
	public Spmarrigenotice[] findWhereBridepinEquals(int bridepin) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridepin = ? ORDER BY bridepin", new Object[] {  new Integer(bridepin) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideVillPrmnt = :brideVillPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBrideVillPrmntEquals(String brideVillPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brideVillPrmnt = ? ORDER BY brideVillPrmnt", new Object[] { brideVillPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridePSPrmnt = :bridePSPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBridePSPrmntEquals(String bridePSPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridePSPrmnt = ? ORDER BY bridePSPrmnt", new Object[] { bridePSPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridePOPrmnt = :bridePOPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBridePOPrmntEquals(String bridePOPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridePOPrmnt = ? ORDER BY bridePOPrmnt", new Object[] { bridePOPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideDistPrmnt = :brideDistPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBrideDistPrmntEquals(String brideDistPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brideDistPrmnt = ? ORDER BY brideDistPrmnt", new Object[] { brideDistPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideStatePrmnt = :brideStatePrmnt'.
	 */
	public Spmarrigenotice[] findWhereBrideStatePrmntEquals(String brideStatePrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brideStatePrmnt = ? ORDER BY brideStatePrmnt", new Object[] { brideStatePrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridePinPrmnt = :bridePinPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBridePinPrmntEquals(int bridePinPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridePinPrmnt = ? ORDER BY bridePinPrmnt", new Object[] {  new Integer(bridePinPrmnt) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brdLenRes = :brdLenRes'.
	 */
	public Spmarrigenotice[] findWhereBrdLenResEquals(String brdLenRes) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brdLenRes = ? ORDER BY brdLenRes", new Object[] { brdLenRes } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideage = :brideage'.
	 */
	public Spmarrigenotice[] findWhereBrideageEquals(int brideage) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brideage = ? ORDER BY brideage", new Object[] {  new Integer(brideage) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridecondi = :bridecondi'.
	 */
	public Spmarrigenotice[] findWhereBridecondiEquals(String bridecondi) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bridecondi = ? ORDER BY bridecondi", new Object[] { bridecondi } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideoccu = :brideoccu'.
	 */
	public Spmarrigenotice[] findWhereBrideoccuEquals(String brideoccu) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE brideoccu = ? ORDER BY brideoccu", new Object[] { brideoccu } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomname = :bgroomname'.
	 */
	public Spmarrigenotice[] findWhereBgroomnameEquals(String bgroomname) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomname = ? ORDER BY bgroomname", new Object[] { bgroomname } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomfather = :bgroomfather'.
	 */
	public Spmarrigenotice[] findWhereBgroomfatherEquals(String bgroomfather) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomfather = ? ORDER BY bgroomfather", new Object[] { bgroomfather } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomvillage = :bgroomvillage'.
	 */
	public Spmarrigenotice[] findWhereBgroomvillageEquals(String bgroomvillage) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomvillage = ? ORDER BY bgroomvillage", new Object[] { bgroomvillage } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomps = :bgroomps'.
	 */
	public Spmarrigenotice[] findWhereBgroompsEquals(String bgroomps) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomps = ? ORDER BY bgroomps", new Object[] { bgroomps } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroompo = :bgroompo'.
	 */
	public Spmarrigenotice[] findWhereBgroompoEquals(String bgroompo) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroompo = ? ORDER BY bgroompo", new Object[] { bgroompo } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomdistrict = :bgroomdistrict'.
	 */
	public Spmarrigenotice[] findWhereBgroomdistrictEquals(String bgroomdistrict) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomdistrict = ? ORDER BY bgroomdistrict", new Object[] { bgroomdistrict } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomstate = :bgroomstate'.
	 */
	public Spmarrigenotice[] findWhereBgroomstateEquals(String bgroomstate) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomstate = ? ORDER BY bgroomstate", new Object[] { bgroomstate } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroompin = :bgroompin'.
	 */
	public Spmarrigenotice[] findWhereBgroompinEquals(int bgroompin) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroompin = ? ORDER BY bgroompin", new Object[] {  new Integer(bgroompin) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmVillPrmnt = :grmVillPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmVillPrmntEquals(String grmVillPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmVillPrmnt = ? ORDER BY grmVillPrmnt", new Object[] { grmVillPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmPSPrmnt = :grmPSPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmPSPrmntEquals(String grmPSPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmPSPrmnt = ? ORDER BY grmPSPrmnt", new Object[] { grmPSPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmPOPrmnt = :grmPOPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmPOPrmntEquals(String grmPOPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmPOPrmnt = ? ORDER BY grmPOPrmnt", new Object[] { grmPOPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmDistPrmnt = :grmDistPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmDistPrmntEquals(String grmDistPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmDistPrmnt = ? ORDER BY grmDistPrmnt", new Object[] { grmDistPrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmStatePrmnt = :grmStatePrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmStatePrmntEquals(String grmStatePrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmStatePrmnt = ? ORDER BY grmStatePrmnt", new Object[] { grmStatePrmnt } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmPinPrmnt = :grmPinPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmPinPrmntEquals(int grmPinPrmnt) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmPinPrmnt = ? ORDER BY grmPinPrmnt", new Object[] {  new Integer(grmPinPrmnt) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmLenRes = :grmLenRes'.
	 */
	public Spmarrigenotice[] findWhereGrmLenResEquals(String grmLenRes) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grmLenRes = ? ORDER BY grmLenRes", new Object[] { grmLenRes } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomage = :bgroomage'.
	 */
	public Spmarrigenotice[] findWhereBgroomageEquals(int bgroomage) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomage = ? ORDER BY bgroomage", new Object[] {  new Integer(bgroomage) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomcondi = :bgroomcondi'.
	 */
	public Spmarrigenotice[] findWhereBgroomcondiEquals(String bgroomcondi) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomcondi = ? ORDER BY bgroomcondi", new Object[] { bgroomcondi } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomoccu = :bgroomoccu'.
	 */
	public Spmarrigenotice[] findWhereBgroomoccuEquals(String bgroomoccu) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bgroomoccu = ? ORDER BY bgroomoccu", new Object[] { bgroomoccu } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'ntfee = :ntfee'.
	 */
	public Spmarrigenotice[] findWhereNtfeeEquals(int ntfee) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ntfee = ? ORDER BY ntfee", new Object[] {  new Integer(ntfee) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'certifee = :certifee'.
	 */
	public Spmarrigenotice[] findWhereCertifeeEquals(int certifee) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE certifee = ? ORDER BY certifee", new Object[] {  new Integer(certifee) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'datemp = :datemp'.
	 */
	public Spmarrigenotice[] findWhereDatempEquals(Date datemp) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datemp = ? ORDER BY datemp", new Object[] { datemp==null ? null : new java.sql.Date( datemp.getTime() ) } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'district_code = :districtCode'.
	 */
	public Spmarrigenotice[] findWhereDistrictCodeEquals(String districtCode) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE district_code = ? ORDER BY district_code", new Object[] { districtCode } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'sro_code = :sroCode'.
	 */
	public Spmarrigenotice[] findWhereSroCodeEquals(String sroCode) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sro_code = ? ORDER BY sro_code", new Object[] { sroCode } );
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'sro_name = :sroName'.
	 */
	public Spmarrigenotice[] findWhereSroNameEquals(String sroName) throws SpmarrigenoticeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sro_name = ? ORDER BY sro_name", new Object[] { sroName } );
	}

	/**
	 * Method 'SpmarrigenoticeDaoImpl'
	 * 
	 */
	public SpmarrigenoticeDaoImpl()
	{
	}

	/**
	 * Method 'SpmarrigenoticeDaoImpl'
	 * 
	 * @param userConn
	 */
	public SpmarrigenoticeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "spmarrigenotice";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Spmarrigenotice fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Spmarrigenotice dto = new Spmarrigenotice();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Spmarrigenotice[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Spmarrigenotice dto = new Spmarrigenotice();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Spmarrigenotice ret[] = new Spmarrigenotice[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Spmarrigenotice dto, ResultSet rs) throws SQLException
	{
		dto.setSlno( rs.getInt( COLUMN_SLNO ) );
		if (rs.wasNull()) {
			dto.setSlnoNull( true );
		}
		
		dto.setNslno( rs.getString( COLUMN_NSLNO ) );
		dto.setDtappl( rs.getDate(COLUMN_DTAPPL ) );
		dto.setOldnew( rs.getString( COLUMN_OLDNEW ) );
		dto.setNmappl( rs.getString( COLUMN_NMAPPL ) );
		dto.setBridename( rs.getString( COLUMN_BRIDENAME ) );
		dto.setBridefather( rs.getString( COLUMN_BRIDEFATHER ) );
		dto.setBridevillage( rs.getString( COLUMN_BRIDEVILLAGE ) );
		dto.setBrideps( rs.getString( COLUMN_BRIDEPS ) );
		dto.setBridepo( rs.getString( COLUMN_BRIDEPO ) );
		dto.setBridedistrict( rs.getString( COLUMN_BRIDEDISTRICT ) );
		dto.setBridestate( rs.getString( COLUMN_BRIDESTATE ) );
		dto.setBridepin( rs.getInt( COLUMN_BRIDEPIN ) );
		if (rs.wasNull()) {
			dto.setBridepinNull( true );
		}
		
		dto.setBrideVillPrmnt( rs.getString( COLUMN_BRIDE_VILL_PRMNT ) );
		dto.setBridePSPrmnt( rs.getString( COLUMN_BRIDE_P_S_PRMNT ) );
		dto.setBridePOPrmnt( rs.getString( COLUMN_BRIDE_P_O_PRMNT ) );
		dto.setBrideDistPrmnt( rs.getString( COLUMN_BRIDE_DIST_PRMNT ) );
		dto.setBrideStatePrmnt( rs.getString( COLUMN_BRIDE_STATE_PRMNT ) );
		dto.setBridePinPrmnt( rs.getInt( COLUMN_BRIDE_PIN_PRMNT ) );
		if (rs.wasNull()) {
			dto.setBridePinPrmntNull( true );
		}
		
		dto.setBrdLenRes( rs.getString( COLUMN_BRD_LEN_RES ) );
		dto.setBrideage( rs.getInt( COLUMN_BRIDEAGE ) );
		if (rs.wasNull()) {
			dto.setBrideageNull( true );
		}
		
		dto.setBridecondi( rs.getString( COLUMN_BRIDECONDI ) );
		dto.setBrideoccu( rs.getString( COLUMN_BRIDEOCCU ) );
		dto.setBgroomname( rs.getString( COLUMN_BGROOMNAME ) );
		dto.setBgroomfather( rs.getString( COLUMN_BGROOMFATHER ) );
		dto.setBgroomvillage( rs.getString( COLUMN_BGROOMVILLAGE ) );
		dto.setBgroomps( rs.getString( COLUMN_BGROOMPS ) );
		dto.setBgroompo( rs.getString( COLUMN_BGROOMPO ) );
		dto.setBgroomdistrict( rs.getString( COLUMN_BGROOMDISTRICT ) );
		dto.setBgroomstate( rs.getString( COLUMN_BGROOMSTATE ) );
		dto.setBgroompin( rs.getInt( COLUMN_BGROOMPIN ) );
		if (rs.wasNull()) {
			dto.setBgroompinNull( true );
		}
		
		dto.setGrmVillPrmnt( rs.getString( COLUMN_GRM_VILL_PRMNT ) );
		dto.setGrmPSPrmnt( rs.getString( COLUMN_GRM_P_S_PRMNT ) );
		dto.setGrmPOPrmnt( rs.getString( COLUMN_GRM_P_O_PRMNT ) );
		dto.setGrmDistPrmnt( rs.getString( COLUMN_GRM_DIST_PRMNT ) );
		dto.setGrmStatePrmnt( rs.getString( COLUMN_GRM_STATE_PRMNT ) );
		dto.setGrmPinPrmnt( rs.getInt( COLUMN_GRM_PIN_PRMNT ) );
		if (rs.wasNull()) {
			dto.setGrmPinPrmntNull( true );
		}
		
		dto.setGrmLenRes( rs.getString( COLUMN_GRM_LEN_RES ) );
		dto.setBgroomage( rs.getInt( COLUMN_BGROOMAGE ) );
		if (rs.wasNull()) {
			dto.setBgroomageNull( true );
		}
		
		dto.setBgroomcondi( rs.getString( COLUMN_BGROOMCONDI ) );
		dto.setBgroomoccu( rs.getString( COLUMN_BGROOMOCCU ) );
		dto.setNtfee( rs.getInt( COLUMN_NTFEE ) );
		if (rs.wasNull()) {
			dto.setNtfeeNull( true );
		}
		
		dto.setCertifee( rs.getInt( COLUMN_CERTIFEE ) );
		if (rs.wasNull()) {
			dto.setCertifeeNull( true );
		}
		
		dto.setDatemp( rs.getDate(COLUMN_DATEMP ) );
		dto.setDistrictCode( rs.getString( COLUMN_DISTRICT_CODE ) );
		dto.setSroCode( rs.getString( COLUMN_SRO_CODE ) );
		dto.setSroName( rs.getString( COLUMN_SRO_NAME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Spmarrigenotice dto)
	{
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the specified arbitrary SQL statement
	 */
	public Spmarrigenotice[] findByDynamicSelect(String sql, Object[] sqlParams) throws SpmarrigenoticeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SpmarrigenoticeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the spmarrigenotice table that match the specified arbitrary SQL statement
	 */
	public Spmarrigenotice[] findByDynamicWhere(String sql, Object[] sqlParams) throws SpmarrigenoticeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SpmarrigenoticeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        // @ to do write customdynamicselect fn
        public String CustomDynamicSelect(String sql, Object[] sqlParams) throws SpmarrigenoticeDaoException           {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
       
        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
       
            // construct the SQL statement
            final String SQL = sql;
       
       
            System.out.println( "Executing " + SQL );
            // prepare statement
            stmt = conn.prepareStatement( SQL );
            stmt.setMaxRows( maxRows );
       
            // bind parameters
            for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
                stmt.setObject( i+1, sqlParams[i] );
            }
       
       
            rs = stmt.executeQuery();
                       
                        String ret=null;
                        while (rs.next()) {
                                ret = rs.getString(1);
                        }

                        return ret;
                       
        }
        catch (Exception _e) {
            _e.printStackTrace();
            throw new SpmarrigenoticeDaoException( "Exception: " + _e.getMessage(), _e );
        }
        finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }
       
        }
       
    }     

// @to do ends
        

}
