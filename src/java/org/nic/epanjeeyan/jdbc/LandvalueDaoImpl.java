/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.jdbc;

import org.nic.epanjeeyan.dao.*;
import org.nic.epanjeeyan.factory.*;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class LandvalueDaoImpl extends AbstractDAO implements LandvalueDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT vlcode, vlname, landtype, amount, ovmtype FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( vlcode, vlname, landtype, amount, ovmtype ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET vlcode = ?, vlname = ?, landtype = ?, amount = ?, ovmtype = ? WHERE vlcode = ? AND landtype = ? AND amount = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE vlcode = ? AND landtype = ? AND amount = ?";

	/** 
	 * Index of column vlcode
	 */
	protected static final int COLUMN_VLCODE = 1;

	/** 
	 * Index of column vlname
	 */
	protected static final int COLUMN_VLNAME = 2;

	/** 
	 * Index of column landtype
	 */
	protected static final int COLUMN_LANDTYPE = 3;

	/** 
	 * Index of column amount
	 */
	protected static final int COLUMN_AMOUNT = 4;

	/** 
	 * Index of column ovmtype
	 */
	protected static final int COLUMN_OVMTYPE = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column vlcode
	 */
	protected static final int PK_COLUMN_VLCODE = 1;

	/** 
	 * Index of primary-key column landtype
	 */
	protected static final int PK_COLUMN_LANDTYPE = 2;

	/** 
	 * Index of primary-key column amount
	 */
	protected static final int PK_COLUMN_AMOUNT = 3;

	/** 
	 * Inserts a new row in the landvalue table.
	 */
	public LandvaluePk insert(Landvalue dto) throws LandvalueDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getVlcode() );
			stmt.setString( index++, dto.getVlname() );
			stmt.setString( index++, dto.getLandtype() );
			stmt.setString( index++, dto.getAmount() );
			stmt.setString( index++, dto.getOvmtype() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandvalueDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the landvalue table.
	 */
	public void update(LandvaluePk pk, Landvalue dto) throws LandvalueDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getVlcode() );
			stmt.setString( index++, dto.getVlname() );
			stmt.setString( index++, dto.getLandtype() );
			stmt.setString( index++, dto.getAmount() );
			stmt.setString( index++, dto.getOvmtype() );
			stmt.setString( 6, pk.getVlcode() );
			stmt.setString( 7, pk.getLandtype() );
			stmt.setString( 8, pk.getAmount() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandvalueDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the landvalue table.
	 */
	public void delete(LandvaluePk pk) throws LandvalueDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getVlcode() );
			stmt.setString( 2, pk.getLandtype() );
			stmt.setString( 3, pk.getAmount() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandvalueDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the landvalue table that matches the specified primary-key value.
	 */
	public Landvalue findByPrimaryKey(LandvaluePk pk) throws LandvalueDaoException
	{
		return findByPrimaryKey( pk.getVlcode(), pk.getLandtype(), pk.getAmount() );
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria 'vlcode = :vlcode AND landtype = :landtype AND amount = :amount'.
	 */
	public Landvalue findByPrimaryKey(String vlcode, String landtype, String amount) throws LandvalueDaoException
	{
		Landvalue ret[] = findByDynamicSelect( SQL_SELECT + " WHERE vlcode = ? AND landtype = ? AND amount = ?", new Object[] { vlcode, landtype, amount } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria ''.
	 */
	public Landvalue[] findAll() throws LandvalueDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY vlcode, landtype, amount", null );
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria 'vlcode = :vlcode'.
	 */
	public Landvalue[] findWhereVlcodeEquals(String vlcode) throws LandvalueDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE vlcode = ? ORDER BY vlcode", new Object[] { vlcode } );
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria 'vlname = :vlname'.
	 */
	public Landvalue[] findWhereVlnameEquals(String vlname) throws LandvalueDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE vlname = ? ORDER BY vlname", new Object[] { vlname } );
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria 'landtype = :landtype'.
	 */
	public Landvalue[] findWhereLandtypeEquals(String landtype) throws LandvalueDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE landtype = ? ORDER BY landtype", new Object[] { landtype } );
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria 'amount = :amount'.
	 */
	public Landvalue[] findWhereAmountEquals(String amount) throws LandvalueDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE amount = ? ORDER BY amount", new Object[] { amount } );
	}

	/** 
	 * Returns all rows from the landvalue table that match the criteria 'ovmtype = :ovmtype'.
	 */
	public Landvalue[] findWhereOvmtypeEquals(String ovmtype) throws LandvalueDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ovmtype = ? ORDER BY ovmtype", new Object[] { ovmtype } );
	}

	/**
	 * Method 'LandvalueDaoImpl'
	 * 
	 */
	public LandvalueDaoImpl()
	{
	}

	/**
	 * Method 'LandvalueDaoImpl'
	 * 
	 * @param userConn
	 */
	public LandvalueDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "landvalue";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Landvalue fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Landvalue dto = new Landvalue();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Landvalue[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Landvalue dto = new Landvalue();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Landvalue ret[] = new Landvalue[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Landvalue dto, ResultSet rs) throws SQLException
	{
		dto.setVlcode( rs.getString( COLUMN_VLCODE ) );
		dto.setVlname( rs.getString( COLUMN_VLNAME ) );
		dto.setLandtype( rs.getString( COLUMN_LANDTYPE ) );
		dto.setAmount( rs.getString( COLUMN_AMOUNT ) );
		dto.setOvmtype( rs.getString( COLUMN_OVMTYPE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Landvalue dto)
	{
	}

	/** 
	 * Returns all rows from the landvalue table that match the specified arbitrary SQL statement
	 */
	public Landvalue[] findByDynamicSelect(String sql, Object[] sqlParams) throws LandvalueDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandvalueDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the landvalue table that match the specified arbitrary SQL statement
	 */
	public Landvalue[] findByDynamicWhere(String sql, Object[] sqlParams) throws LandvalueDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LandvalueDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
