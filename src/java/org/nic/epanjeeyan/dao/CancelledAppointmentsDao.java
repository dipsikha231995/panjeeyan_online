/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface CancelledAppointmentsDao
{
	/** 
	 * Inserts a new row in the cancelled_appointments table.
	 */
	public CancelledAppointmentsPk insert(CancelledAppointments dto) throws CancelledAppointmentsDaoException;

	/** 
	 * Updates a single row in the cancelled_appointments table.
	 */
	public void update(CancelledAppointmentsPk pk, CancelledAppointments dto) throws CancelledAppointmentsDaoException;

	/** 
	 * Deletes a single row in the cancelled_appointments table.
	 */
	public void delete(CancelledAppointmentsPk pk) throws CancelledAppointmentsDaoException;

	/** 
	 * Returns the rows from the cancelled_appointments table that matches the specified primary-key value.
	 */
	public CancelledAppointments findByPrimaryKey(CancelledAppointmentsPk pk) throws CancelledAppointmentsDaoException;

	/** 
	 * Returns all rows from the cancelled_appointments table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public CancelledAppointments findByPrimaryKey(String appointmentId) throws CancelledAppointmentsDaoException;

	/** 
	 * Returns all rows from the cancelled_appointments table that match the criteria ''.
	 */
	public CancelledAppointments[] findAll() throws CancelledAppointmentsDaoException;

	/** 
	 * Returns all rows from the cancelled_appointments table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public CancelledAppointments[] findWhereAppointmentIdEquals(String appointmentId) throws CancelledAppointmentsDaoException;

	/** 
	 * Returns all rows from the cancelled_appointments table that match the criteria 'reason = :reason'.
	 */
	public CancelledAppointments[] findWhereReasonEquals(String reason) throws CancelledAppointmentsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cancelled_appointments table that match the specified arbitrary SQL statement
	 */
	public CancelledAppointments[] findByDynamicSelect(String sql, Object[] sqlParams) throws CancelledAppointmentsDaoException;

	/** 
	 * Returns all rows from the cancelled_appointments table that match the specified arbitrary SQL statement
	 */
	public CancelledAppointments[] findByDynamicWhere(String sql, Object[] sqlParams) throws CancelledAppointmentsDaoException;

}
