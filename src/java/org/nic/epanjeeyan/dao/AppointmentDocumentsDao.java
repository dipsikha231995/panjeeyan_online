/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface AppointmentDocumentsDao
{
	/** 
	 * Inserts a new row in the appointment_documents table.
	 */
	public AppointmentDocumentsPk insert(AppointmentDocuments dto) throws AppointmentDocumentsDaoException;

	/** 
	 * Updates a single row in the appointment_documents table.
	 */
	public void update(AppointmentDocumentsPk pk, AppointmentDocuments dto) throws AppointmentDocumentsDaoException;

	/** 
	 * Deletes a single row in the appointment_documents table.
	 */
	public void delete(AppointmentDocumentsPk pk) throws AppointmentDocumentsDaoException;

	/** 
	 * Returns the rows from the appointment_documents table that matches the specified primary-key value.
	 */
	public AppointmentDocuments findByPrimaryKey(AppointmentDocumentsPk pk) throws AppointmentDocumentsDaoException;

	/** 
	 * Returns all rows from the appointment_documents table that match the criteria 'slno = :slno'.
	 */
	public AppointmentDocuments findByPrimaryKey(int slno) throws AppointmentDocumentsDaoException;

	/** 
	 * Returns all rows from the appointment_documents table that match the criteria ''.
	 */
	public AppointmentDocuments[] findAll() throws AppointmentDocumentsDaoException;

	/** 
	 * Returns all rows from the appointment_documents table that match the criteria 'slno = :slno'.
	 */
	public AppointmentDocuments[] findWhereSlnoEquals(int slno) throws AppointmentDocumentsDaoException;

	/** 
	 * Returns all rows from the appointment_documents table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public AppointmentDocuments[] findWhereAppointmentIdEquals(String appointmentId) throws AppointmentDocumentsDaoException;

	/** 
	 * Returns all rows from the appointment_documents table that match the criteria 'document = :document'.
	 */
	public AppointmentDocuments[] findWhereDocumentEquals(byte[] document) throws AppointmentDocumentsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the appointment_documents table that match the specified arbitrary SQL statement
	 */
	public AppointmentDocuments[] findByDynamicSelect(String sql, Object[] sqlParams) throws AppointmentDocumentsDaoException;

	/** 
	 * Returns all rows from the appointment_documents table that match the specified arbitrary SQL statement
	 */
	public AppointmentDocuments[] findByDynamicWhere(String sql, Object[] sqlParams) throws AppointmentDocumentsDaoException;

}
