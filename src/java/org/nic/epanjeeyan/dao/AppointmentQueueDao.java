/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface AppointmentQueueDao
{
	/** 
	 * Inserts a new row in the appointment_queue table.
	 */
	public void insert(AppointmentQueue dto) throws AppointmentQueueDaoException;

	/** 
	 * Returns all rows from the appointment_queue table that match the criteria ''.
	 */
	public AppointmentQueue[] findAll() throws AppointmentQueueDaoException;

	/** 
	 * Returns all rows from the appointment_queue table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public AppointmentQueue[] findWhereAppointmentIdEquals(String appointmentId) throws AppointmentQueueDaoException;

	/** 
	 * Returns all rows from the appointment_queue table that match the criteria 'officer_id = :officerId'.
	 */
	public AppointmentQueue[] findWhereOfficerIdEquals(int officerId) throws AppointmentQueueDaoException;

	/** 
	 * Returns all rows from the appointment_queue table that match the criteria 'appointment_date = :appointmentDate'.
	 */
	public AppointmentQueue[] findWhereAppointmentDateEquals(Date appointmentDate) throws AppointmentQueueDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the appointment_queue table that match the specified arbitrary SQL statement
	 */
	public AppointmentQueue[] findByDynamicSelect(String sql, Object[] sqlParams) throws AppointmentQueueDaoException;

	/** 
	 * Returns all rows from the appointment_queue table that match the specified arbitrary SQL statement
	 */
	public AppointmentQueue[] findByDynamicWhere(String sql, Object[] sqlParams) throws AppointmentQueueDaoException;

}
