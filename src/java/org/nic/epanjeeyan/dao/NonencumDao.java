/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface NonencumDao
{
	/** 
	 * Inserts a new row in the nonencum table.
	 */
	public NonencumPk insert(Nonencum dto) throws NonencumDaoException;

	/** 
	 * Updates a single row in the nonencum table.
	 */
	public void update(NonencumPk pk, Nonencum dto) throws NonencumDaoException;

	/** 
	 * Deletes a single row in the nonencum table.
	 */
	public void delete(NonencumPk pk) throws NonencumDaoException;

	/** 
	 * Returns the rows from the nonencum table that matches the specified primary-key value.
	 */
	public Nonencum findByPrimaryKey(NonencumPk pk) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'srlno = :srlno AND applno = :applno'.
	 */
	public Nonencum findByPrimaryKey(int srlno, String applno) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria ''.
	 */
	public Nonencum[] findAll() throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'srlno = :srlno'.
	 */
	public Nonencum[] findWhereSrlnoEquals(int srlno) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'slno = :slno'.
	 */
	public Nonencum[] findWhereSlnoEquals(int slno) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'applno = :applno'.
	 */
	public Nonencum[] findWhereApplnoEquals(String applno) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'appldate = :appldate'.
	 */
	public Nonencum[] findWhereAppldateEquals(Date appldate) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'nmappl = :nmappl'.
	 */
	public Nonencum[] findWhereNmapplEquals(String nmappl) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'nmfather = :nmfather'.
	 */
	public Nonencum[] findWhereNmfatherEquals(String nmfather) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'addr = :addr'.
	 */
	public Nonencum[] findWhereAddrEquals(String addr) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'mcode = :mcode'.
	 */
	public Nonencum[] findWhereMcodeEquals(String mcode) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'vlcode = :vlcode'.
	 */
	public Nonencum[] findWhereVlcodeEquals(String vlcode) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'record1 = :record1'.
	 */
	public Nonencum[] findWhereRecord1Equals(Date record1) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'record2 = :record2'.
	 */
	public Nonencum[] findWhereRecord2Equals(Date record2) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'refno = :refno'.
	 */
	public Nonencum[] findWhereRefnoEquals(String refno) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'ref_yr = :refYr'.
	 */
	public Nonencum[] findWhereRefYrEquals(String refYr) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'pattano = :pattano'.
	 */
	public Nonencum[] findWherePattanoEquals(String pattano) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'dagno = :dagno'.
	 */
	public Nonencum[] findWhereDagnoEquals(String dagno) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'area = :area'.
	 */
	public Nonencum[] findWhereAreaEquals(String area) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'search = :search'.
	 */
	public Nonencum[] findWhereSearchEquals(String search) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'feeamt = :feeamt'.
	 */
	public Nonencum[] findWhereFeeamtEquals(float feeamt) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'issued = :issued'.
	 */
	public Nonencum[] findWhereIssuedEquals(short issued) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the criteria 'fee_type = :feeType'.
	 */
	public Nonencum[] findWhereFeeTypeEquals(String feeType) throws NonencumDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nonencum table that match the specified arbitrary SQL statement
	 */
	public Nonencum[] findByDynamicSelect(String sql, Object[] sqlParams) throws NonencumDaoException;

	/** 
	 * Returns all rows from the nonencum table that match the specified arbitrary SQL statement
	 */
	public Nonencum[] findByDynamicWhere(String sql, Object[] sqlParams) throws NonencumDaoException;

}
