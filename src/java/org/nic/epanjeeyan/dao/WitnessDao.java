/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface WitnessDao
{
	/** 
	 * Inserts a new row in the witness table.
	 */
	public WitnessPk insert(Witness dto) throws WitnessDaoException;

	/** 
	 * Updates a single row in the witness table.
	 */
	public void update(WitnessPk pk, Witness dto) throws WitnessDaoException;

	/** 
	 * Deletes a single row in the witness table.
	 */
	public void delete(WitnessPk pk) throws WitnessDaoException;

	/** 
	 * Returns the rows from the witness table that matches the specified primary-key value.
	 */
	public Witness findByPrimaryKey(WitnessPk pk) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'slno = :slno AND comcaseno = :comcaseno AND wtype = :wtype'.
	 */
	public Witness findByPrimaryKey(int slno, String comcaseno, String wtype) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria ''.
	 */
	public Witness[] findAll() throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'slno = :slno'.
	 */
	public Witness[] findWhereSlnoEquals(int slno) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'comcaseno = :comcaseno'.
	 */
	public Witness[] findWhereComcasenoEquals(String comcaseno) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'namew = :namew'.
	 */
	public Witness[] findWhereNamewEquals(String namew) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'addrw = :addrw'.
	 */
	public Witness[] findWhereAddrwEquals(String addrw) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'wtype = :wtype'.
	 */
	public Witness[] findWhereWtypeEquals(String wtype) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'check_complete = :checkComplete'.
	 */
	public Witness[] findWhereCheckCompleteEquals(int checkComplete) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'witnesscheck_complete = :witnesscheckComplete'.
	 */
	public Witness[] findWhereWitnesscheckCompleteEquals(int witnesscheckComplete) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'identifiercheck_complete = :identifiercheckComplete'.
	 */
	public Witness[] findWhereIdentifiercheckCompleteEquals(int identifiercheckComplete) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'draftercheck_complete = :draftercheckComplete'.
	 */
	public Witness[] findWhereDraftercheckCompleteEquals(int draftercheckComplete) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'any_othercheck_complete = :anyOthercheckComplete'.
	 */
	public Witness[] findWhereAnyOthercheckCompleteEquals(int anyOthercheckComplete) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'district_code = :districtCode'.
	 */
	public Witness[] findWhereDistrictCodeEquals(String districtCode) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the criteria 'sro_code = :sroCode'.
	 */
	public Witness[] findWhereSroCodeEquals(String sroCode) throws WitnessDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the witness table that match the specified arbitrary SQL statement
	 */
	public Witness[] findByDynamicSelect(String sql, Object[] sqlParams) throws WitnessDaoException;

	/** 
	 * Returns all rows from the witness table that match the specified arbitrary SQL statement
	 */
	public Witness[] findByDynamicWhere(String sql, Object[] sqlParams) throws WitnessDaoException;

}
