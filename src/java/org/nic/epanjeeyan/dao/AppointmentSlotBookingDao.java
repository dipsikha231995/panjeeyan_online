/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface AppointmentSlotBookingDao
{
	/** 
	 * Inserts a new row in the appointment_slot_booking table.
	 */
	public AppointmentSlotBookingPk insert(AppointmentSlotBooking dto) throws AppointmentSlotBookingDaoException;

	/** 
	 * Updates a single row in the appointment_slot_booking table.
	 */
	public void update(AppointmentSlotBookingPk pk, AppointmentSlotBooking dto) throws AppointmentSlotBookingDaoException;

	/** 
	 * Deletes a single row in the appointment_slot_booking table.
	 */
	public void delete(AppointmentSlotBookingPk pk) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns the rows from the appointment_slot_booking table that matches the specified primary-key value.
	 */
	public AppointmentSlotBooking findByPrimaryKey(AppointmentSlotBookingPk pk) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public AppointmentSlotBooking findByPrimaryKey(String appointmentId) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria ''.
	 */
	public AppointmentSlotBooking[] findAll() throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'slno = :slno'.
	 */
	public AppointmentSlotBooking[] findWhereSlnoEquals(int slno) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_id = :appointmentId'.
	 */
	public AppointmentSlotBooking[] findWhereAppointmentIdEquals(String appointmentId) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'officer_id = :officerId'.
	 */
	public AppointmentSlotBooking[] findWhereOfficerIdEquals(int officerId) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'applicant_name = :applicantName'.
	 */
	public AppointmentSlotBooking[] findWhereApplicantNameEquals(String applicantName) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'email = :email'.
	 */
	public AppointmentSlotBooking[] findWhereEmailEquals(String email) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'mobile_number = :mobileNumber'.
	 */
	public AppointmentSlotBooking[] findWhereMobileNumberEquals(String mobileNumber) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'applicant_address = :applicantAddress'.
	 */
	public AppointmentSlotBooking[] findWhereApplicantAddressEquals(String applicantAddress) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'applicant_type = :applicantType'.
	 */
	public AppointmentSlotBooking[] findWhereApplicantTypeEquals(String applicantType) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'area_type = :areaType'.
	 */
	public AppointmentSlotBooking[] findWhereAreaTypeEquals(String areaType) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'application_date = :applicationDate'.
	 */
	public AppointmentSlotBooking[] findWhereApplicationDateEquals(Date applicationDate) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'application_date_time = :applicationDateTime'.
	 */
	public AppointmentSlotBooking[] findWhereApplicationDateTimeEquals(Date applicationDateTime) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'deed_type = :deedType'.
	 */
	public AppointmentSlotBooking[] findWhereDeedTypeEquals(int deedType) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'deed_subtype = :deedSubtype'.
	 */
	public AppointmentSlotBooking[] findWhereDeedSubtypeEquals(String deedSubtype) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'consideration_amount = :considerationAmount'.
	 */
	public AppointmentSlotBooking[] findWhereConsiderationAmountEquals(int considerationAmount) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'registration_fee = :registrationFee'.
	 */
	public AppointmentSlotBooking[] findWhereRegistrationFeeEquals(int registrationFee) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'stamp_duty = :stampDuty'.
	 */
	public AppointmentSlotBooking[] findWhereStampDutyEquals(int stampDuty) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'document_to_be_furnished = :documentToBeFurnished'.
	 */
	public AppointmentSlotBooking[] findWhereDocumentToBeFurnishedEquals(String documentToBeFurnished) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'doc_subject = :docSubject'.
	 */
	public AppointmentSlotBooking[] findWhereDocSubjectEquals(String docSubject) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'whether_land = :whetherLand'.
	 */
	public AppointmentSlotBooking[] findWhereWhetherLandEquals(short whetherLand) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'gender = :gender'.
	 */
	public AppointmentSlotBooking[] findWhereGenderEquals(String gender) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'act = :act'.
	 */
	public AppointmentSlotBooking[] findWhereActEquals(String act) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'sro_office = :sroOffice'.
	 */
	public AppointmentSlotBooking[] findWhereSroOfficeEquals(int sroOffice) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_date = :appointmentDate'.
	 */
	public AppointmentSlotBooking[] findWhereAppointmentDateEquals(Date appointmentDate) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the criteria 'appointment_time_slot = :appointmentTimeSlot'.
	 */
	public AppointmentSlotBooking[] findWhereAppointmentTimeSlotEquals(Date appointmentTimeSlot) throws AppointmentSlotBookingDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the specified arbitrary SQL statement
	 */
	public AppointmentSlotBooking[] findByDynamicSelect(String sql, Object[] sqlParams) throws AppointmentSlotBookingDaoException;

	/** 
	 * Returns all rows from the appointment_slot_booking table that match the specified arbitrary SQL statement
	 */
	public AppointmentSlotBooking[] findByDynamicWhere(String sql, Object[] sqlParams) throws AppointmentSlotBookingDaoException;

}
