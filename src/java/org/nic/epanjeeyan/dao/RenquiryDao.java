/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface RenquiryDao
{
	/** 
	 * Inserts a new row in the renquiry table.
	 */
	public RenquiryPk insert(Renquiry dto) throws RenquiryDaoException;

	/** 
	 * Updates a single row in the renquiry table.
	 */
	public void update(RenquiryPk pk, Renquiry dto) throws RenquiryDaoException;

	/** 
	 * Deletes a single row in the renquiry table.
	 */
	public void delete(RenquiryPk pk) throws RenquiryDaoException;

	/** 
	 * Returns the rows from the renquiry table that matches the specified primary-key value.
	 */
	public Renquiry findByPrimaryKey(RenquiryPk pk) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'tmpcaseno = :tmpcaseno'.
	 */
	public Renquiry findByPrimaryKey(String tmpcaseno) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria ''.
	 */
	public Renquiry[] pageAll(Integer offset,Integer num) throws RenquiryDaoException;
        public Renquiry[] findAll() throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'slno = :slno'.
	 */
	public Renquiry[] findWhereSlnoEquals(int slno) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'tmpcaseno = :tmpcaseno'.
	 */
	public Renquiry[] findWhereTmpcasenoEquals(String tmpcaseno) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'applicant_name = :applicantName'.
	 */
	public Renquiry[] findWhereApplicantNameEquals(String applicantName) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'area_type = :areaType'.
	 */
	public Renquiry[] findWhereAreaTypeEquals(String areaType) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'enquiry_date = :enquiryDate'.
	 */
	public Renquiry[] findWhereEnquiryDateEquals(Date enquiryDate) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'deed_type = :deedType'.
	 */
	public Renquiry[] findWhereDeedTypeEquals(int deedType) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'deed_subtype = :deedSubtype'.
	 */
	public Renquiry[] findWhereDeedSubtypeEquals(String deedSubtype) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'consideration_amount = :considerationAmount'.
	 */
	public Renquiry[] findWhereConsiderationAmountEquals(int considerationAmount) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'registration_fee = :registrationFee'.
	 */
	public Renquiry[] findWhereRegistrationFeeEquals(int registrationFee) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'stamp_duty = :stampDuty'.
	 */
	public Renquiry[] findWhereStampDutyEquals(int stampDuty) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'document_to_be_furnished = :documentToBeFurnished'.
	 */
	public Renquiry[] findWhereDocumentToBeFurnishedEquals(String documentToBeFurnished) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'doc_subject = :docSubject'.
	 */
	public Renquiry[] findWhereDocSubjectEquals(String docSubject) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'whether_land = :whetherLand'.
	 */
	public Renquiry[] findWhereWhetherLandEquals(int whetherLand) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'gender = :gender'.
	 */
	public Renquiry[] findWhereGenderEquals(String gender) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the criteria 'act = :act'.
	 */
	public Renquiry[] findWhereActEquals(String act) throws RenquiryDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the renquiry table that match the specified arbitrary SQL statement
	 */
	public Renquiry[] findByDynamicSelect(String sql, Object[] sqlParams) throws RenquiryDaoException;

	/** 
	 * Returns all rows from the renquiry table that match the specified arbitrary SQL statement
	 */
	public Renquiry[] findByDynamicWhere(String sql, Object[] sqlParams) throws RenquiryDaoException;
        public int CustomDynamicSelect(String sql, Object[] sqlParams) throws RenquiryDaoException;
        public String CustomDynamicSelect1(String sql, Object[] sqlParams) throws RenquiryDaoException;

}
