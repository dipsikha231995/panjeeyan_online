/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface PartyDao
{
	/** 
	 * Inserts a new row in the party table.
	 */
	public PartyPk insert(Party dto) throws PartyDaoException;

	/** 
	 * Updates a single row in the party table.
	 */
	public void update(PartyPk pk, Party dto) throws PartyDaoException;

	/** 
	 * Deletes a single row in the party table.
	 */
	public void delete(PartyPk pk) throws PartyDaoException;

	/** 
	 * Returns the rows from the party table that matches the specified primary-key value.
	 */
	public Party findByPrimaryKey(PartyPk pk) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'slno = :slno AND party_comcaseno = :partyComcaseno AND partytype = :partytype'.
	 */
	public Party findByPrimaryKey(Integer slno, String partyComcaseno, String partytype) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria ''.
	 */
	public Party[] findAll() throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'auto_id = :autoId'.
	 */
	public Party[] findWhereAutoIdEquals(Long autoId) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'slno = :slno'.
	 */
	public Party[] findWhereSlnoEquals(Integer slno) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'party_comcaseno = :partyComcaseno'.
	 */
	public Party[] findWherePartyComcasenoEquals(String partyComcaseno) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'noofp = :noofp'.
	 */
	public Party[] findWhereNoofpEquals(Integer noofp) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'nameparty = :nameparty'.
	 */
	public Party[] findWhereNamepartyEquals(String nameparty) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'noofpersons = :noofpersons'.
	 */
	public Party[] findWhereNoofpersonsEquals(Integer noofpersons) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'fname = :fname'.
	 */
	public Party[] findWhereFnameEquals(String fname) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'address = :address'.
	 */
	public Party[] findWhereAddressEquals(String address) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'village = :village'.
	 */
	public Party[] findWhereVillageEquals(String village) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'poff = :poff'.
	 */
	public Party[] findWherePoffEquals(String poff) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'pstat = :pstat'.
	 */
	public Party[] findWherePstatEquals(String pstat) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'district = :district'.
	 */
	public Party[] findWhereDistrictEquals(String district) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'state = :state'.
	 */
	public Party[] findWhereStateEquals(String state) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'partytype = :partytype'.
	 */
	public Party[] findWherePartytypeEquals(String partytype) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'check_complete = :checkComplete'.
	 */
	public Party[] findWhereCheckCompleteEquals(Short checkComplete) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'district_code = :districtCode'.
	 */
	public Party[] findWhereDistrictCodeEquals(String districtCode) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'sro_code = :sroCode'.
	 */
	public Party[] findWhereSroCodeEquals(String sroCode) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'firstPartyComplete = :firstPartyComplete'.
	 */
	public Party[] findWhereFirstPartyCompleteEquals(Short firstPartyComplete) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the criteria 'category = :category'.
	 */
	public Party[] findWhereCategoryEquals(Integer category) throws PartyDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the party table that match the specified arbitrary SQL statement
	 */
	public Party[] findByDynamicSelect(String sql, Object[] sqlParams) throws PartyDaoException;

	/** 
	 * Returns all rows from the party table that match the specified arbitrary SQL statement
	 */
	public Party[] findByDynamicWhere(String sql, Object[] sqlParams) throws PartyDaoException;

}
