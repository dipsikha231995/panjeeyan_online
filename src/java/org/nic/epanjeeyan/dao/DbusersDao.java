/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface DbusersDao
{
	/** 
	 * Inserts a new row in the dbusers table.
	 */
	public DbusersPk insert(Dbusers dto) throws DbusersDaoException;

	/** 
	 * Updates a single row in the dbusers table.
	 */
	public void update(DbusersPk pk, Dbusers dto) throws DbusersDaoException;

	/** 
	 * Deletes a single row in the dbusers table.
	 */
	public void delete(DbusersPk pk) throws DbusersDaoException;

	/** 
	 * Returns the rows from the dbusers table that matches the specified primary-key value.
	 */
	public Dbusers findByPrimaryKey(DbusersPk pk) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'db_id = :dbId'.
	 */
	public Dbusers findByPrimaryKey(int dbId) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'user = :user'.
	 */
	public Dbusers[] findWhereUserEquals(String user) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria ''.
	 */
	public Dbusers[] findAll() throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'db_id = :dbId'.
	 */
	public Dbusers[] findWhereDbIdEquals(int dbId) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'dbname = :dbname'.
	 */
	public Dbusers[] findWhereDbnameEquals(String dbname) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'sro_code = :sroCode'.
	 */
	public Dbusers[] findWhereSroCodeEquals(String sroCode) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'district_code = :districtCode'.
	 */
	public Dbusers[] findWhereDistrictCodeEquals(String districtCode) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'officename = :officename'.
	 */
	public Dbusers[] findWhereOfficenameEquals(String officename) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'username = :username'.
	 */
	public Dbusers[] findWhereUsernameEquals(String username) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the criteria 'password = :password'.
	 */
	public Dbusers[] findWherePasswordEquals(String password) throws DbusersDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the dbusers table that match the specified arbitrary SQL statement
	 */
	public Dbusers[] findByDynamicSelect(String sql, Object[] sqlParams) throws DbusersDaoException;

	/** 
	 * Returns all rows from the dbusers table that match the specified arbitrary SQL statement
	 */
	public Dbusers[] findByDynamicWhere(String sql, Object[] sqlParams) throws DbusersDaoException;

}
