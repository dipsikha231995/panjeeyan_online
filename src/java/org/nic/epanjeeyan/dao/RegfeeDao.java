/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface RegfeeDao
{
	/** 
	 * Inserts a new row in the regfee table.
	 */
	public void insert(Regfee dto) throws RegfeeDaoException;

	/** 
	 * Returns all rows from the regfee table that match the criteria ''.
	 */
	public Regfee[] findAll() throws RegfeeDaoException;

	/** 
	 * Returns all rows from the regfee table that match the criteria 'amt1 = :amt1'.
	 */
	public Regfee[] findWhereAmt1Equals(int amt1) throws RegfeeDaoException;

	/** 
	 * Returns all rows from the regfee table that match the criteria 'amt2 = :amt2'.
	 */
	public Regfee[] findWhereAmt2Equals(int amt2) throws RegfeeDaoException;

	/** 
	 * Returns all rows from the regfee table that match the criteria 'amount = :amount'.
	 */
	public Regfee[] findWhereAmountEquals(int amount) throws RegfeeDaoException;

	/** 
	 * Returns all rows from the regfee table that match the criteria 'stampamt = :stampamt'.
	 */
	public Regfee[] findWhereStampamtEquals(int stampamt) throws RegfeeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the regfee table that match the specified arbitrary SQL statement
	 */
	public Regfee[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegfeeDaoException;

	/** 
	 * Returns all rows from the regfee table that match the specified arbitrary SQL statement
	 */
	public Regfee[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegfeeDaoException;

}
