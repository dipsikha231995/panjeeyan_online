/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface ApplicantTypeDao
{
	/** 
	 * Inserts a new row in the applicant_type table.
	 */
	public ApplicantTypePk insert(ApplicantType dto) throws ApplicantTypeDaoException;

	/** 
	 * Updates a single row in the applicant_type table.
	 */
	public void update(ApplicantTypePk pk, ApplicantType dto) throws ApplicantTypeDaoException;

	/** 
	 * Deletes a single row in the applicant_type table.
	 */
	public void delete(ApplicantTypePk pk) throws ApplicantTypeDaoException;

	/** 
	 * Returns the rows from the applicant_type table that matches the specified primary-key value.
	 */
	public ApplicantType findByPrimaryKey(ApplicantTypePk pk) throws ApplicantTypeDaoException;

	/** 
	 * Returns all rows from the applicant_type table that match the criteria 'slno = :slno'.
	 */
	public ApplicantType findByPrimaryKey(int slno) throws ApplicantTypeDaoException;

	/** 
	 * Returns all rows from the applicant_type table that match the criteria ''.
	 */
	public ApplicantType[] findAll() throws ApplicantTypeDaoException;

	/** 
	 * Returns all rows from the applicant_type table that match the criteria 'slno = :slno'.
	 */
	public ApplicantType[] findWhereSlnoEquals(int slno) throws ApplicantTypeDaoException;

	/** 
	 * Returns all rows from the applicant_type table that match the criteria 'type = :type'.
	 */
	public ApplicantType[] findWhereTypeEquals(String type) throws ApplicantTypeDaoException;

	/** 
	 * Returns all rows from the applicant_type table that match the criteria 'exempted = :exempted'.
	 */
	public ApplicantType[] findWhereExemptedEquals(short exempted) throws ApplicantTypeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the applicant_type table that match the specified arbitrary SQL statement
	 */
	public ApplicantType[] findByDynamicSelect(String sql, Object[] sqlParams) throws ApplicantTypeDaoException;

	/** 
	 * Returns all rows from the applicant_type table that match the specified arbitrary SQL statement
	 */
	public ApplicantType[] findByDynamicWhere(String sql, Object[] sqlParams) throws ApplicantTypeDaoException;

}
