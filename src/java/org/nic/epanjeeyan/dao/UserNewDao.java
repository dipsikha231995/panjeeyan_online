/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface UserNewDao
{
	/** 
	 * Inserts a new row in the user_new table.
	 */
	public UserNewPk insert(UserNew dto) throws UserNewDaoException;

	/** 
	 * Updates a single row in the user_new table.
	 */
	public void update(UserNewPk pk, UserNew dto) throws UserNewDaoException;

	/** 
	 * Deletes a single row in the user_new table.
	 */
	public void delete(UserNewPk pk) throws UserNewDaoException;

	/** 
	 * Returns the rows from the user_new table that matches the specified primary-key value.
	 */
	public UserNew findByPrimaryKey(UserNewPk pk) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'userid = :userid'.
	 */
	public UserNew findByPrimaryKey(String userid) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria ''.
	 */
	public UserNew[] findAll() throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'userid = :userid'.
	 */
	public UserNew[] findWhereUseridEquals(String userid) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'username = :username'.
	 */
	public UserNew[] findWhereUsernameEquals(String username) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password = :password'.
	 */
	public UserNew[] findWherePasswordEquals(String password) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password1 = :password1'.
	 */
	public UserNew[] findWherePassword1Equals(String password1) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password2 = :password2'.
	 */
	public UserNew[] findWherePassword2Equals(String password2) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password3 = :password3'.
	 */
	public UserNew[] findWherePassword3Equals(String password3) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'password4 = :password4'.
	 */
	public UserNew[] findWherePassword4Equals(String password4) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'designation = :designation'.
	 */
	public UserNew[] findWhereDesignationEquals(String designation) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'operator = :operator'.
	 */
	public UserNew[] findWhereOperatorEquals(int operator) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'accountant = :accountant'.
	 */
	public UserNew[] findWhereAccountantEquals(int accountant) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'ro = :ro'.
	 */
	public UserNew[] findWhereRoEquals(int ro) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'assistant = :assistant'.
	 */
	public UserNew[] findWhereAssistantEquals(int assistant) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'admin = :admin'.
	 */
	public UserNew[] findWhereAdminEquals(int admin) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the criteria 'helpdesk = :helpdesk'.
	 */
	public UserNew[] findWhereHelpdeskEquals(int helpdesk) throws UserNewDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the user_new table that match the specified arbitrary SQL statement
	 */
	public UserNew[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserNewDaoException;

	/** 
	 * Returns all rows from the user_new table that match the specified arbitrary SQL statement
	 */
	public UserNew[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserNewDaoException;

}
