/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import java.util.Date;
import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface SpmarrigenoticeDao
{
	/** 
	 * Inserts a new row in the spmarrigenotice table.
	 */
	public SpmarrigenoticePk insert(Spmarrigenotice dto) throws SpmarrigenoticeDaoException;

	/** 
	 * Updates a single row in the spmarrigenotice table.
	 */
	public void update(SpmarrigenoticePk pk, Spmarrigenotice dto) throws SpmarrigenoticeDaoException;

	/** 
	 * Deletes a single row in the spmarrigenotice table.
	 */
	public void delete(SpmarrigenoticePk pk) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns the rows from the spmarrigenotice table that matches the specified primary-key value.
	 */
	public Spmarrigenotice findByPrimaryKey(SpmarrigenoticePk pk) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'nslno = :nslno'.
	 */
	public Spmarrigenotice findByPrimaryKey(String nslno) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria ''.
	 */
	public Spmarrigenotice[] findAll() throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'slno = :slno'.
	 */
	public Spmarrigenotice[] findWhereSlnoEquals(int slno) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'nslno = :nslno'.
	 */
	public Spmarrigenotice[] findWhereNslnoEquals(String nslno) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'dtappl = :dtappl'.
	 */
	public Spmarrigenotice[] findWhereDtapplEquals(Date dtappl) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'oldnew = :oldnew'.
	 */
	public Spmarrigenotice[] findWhereOldnewEquals(String oldnew) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'nmappl = :nmappl'.
	 */
	public Spmarrigenotice[] findWhereNmapplEquals(String nmappl) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridename = :bridename'.
	 */
	public Spmarrigenotice[] findWhereBridenameEquals(String bridename) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridefather = :bridefather'.
	 */
	public Spmarrigenotice[] findWhereBridefatherEquals(String bridefather) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridevillage = :bridevillage'.
	 */
	public Spmarrigenotice[] findWhereBridevillageEquals(String bridevillage) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideps = :brideps'.
	 */
	public Spmarrigenotice[] findWhereBridepsEquals(String brideps) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridepo = :bridepo'.
	 */
	public Spmarrigenotice[] findWhereBridepoEquals(String bridepo) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridedistrict = :bridedistrict'.
	 */
	public Spmarrigenotice[] findWhereBridedistrictEquals(String bridedistrict) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridestate = :bridestate'.
	 */
	public Spmarrigenotice[] findWhereBridestateEquals(String bridestate) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridepin = :bridepin'.
	 */
	public Spmarrigenotice[] findWhereBridepinEquals(int bridepin) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideVillPrmnt = :brideVillPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBrideVillPrmntEquals(String brideVillPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridePSPrmnt = :bridePSPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBridePSPrmntEquals(String bridePSPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridePOPrmnt = :bridePOPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBridePOPrmntEquals(String bridePOPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideDistPrmnt = :brideDistPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBrideDistPrmntEquals(String brideDistPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideStatePrmnt = :brideStatePrmnt'.
	 */
	public Spmarrigenotice[] findWhereBrideStatePrmntEquals(String brideStatePrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridePinPrmnt = :bridePinPrmnt'.
	 */
	public Spmarrigenotice[] findWhereBridePinPrmntEquals(int bridePinPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brdLenRes = :brdLenRes'.
	 */
	public Spmarrigenotice[] findWhereBrdLenResEquals(String brdLenRes) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideage = :brideage'.
	 */
	public Spmarrigenotice[] findWhereBrideageEquals(int brideage) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bridecondi = :bridecondi'.
	 */
	public Spmarrigenotice[] findWhereBridecondiEquals(String bridecondi) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'brideoccu = :brideoccu'.
	 */
	public Spmarrigenotice[] findWhereBrideoccuEquals(String brideoccu) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomname = :bgroomname'.
	 */
	public Spmarrigenotice[] findWhereBgroomnameEquals(String bgroomname) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomfather = :bgroomfather'.
	 */
	public Spmarrigenotice[] findWhereBgroomfatherEquals(String bgroomfather) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomvillage = :bgroomvillage'.
	 */
	public Spmarrigenotice[] findWhereBgroomvillageEquals(String bgroomvillage) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomps = :bgroomps'.
	 */
	public Spmarrigenotice[] findWhereBgroompsEquals(String bgroomps) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroompo = :bgroompo'.
	 */
	public Spmarrigenotice[] findWhereBgroompoEquals(String bgroompo) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomdistrict = :bgroomdistrict'.
	 */
	public Spmarrigenotice[] findWhereBgroomdistrictEquals(String bgroomdistrict) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomstate = :bgroomstate'.
	 */
	public Spmarrigenotice[] findWhereBgroomstateEquals(String bgroomstate) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroompin = :bgroompin'.
	 */
	public Spmarrigenotice[] findWhereBgroompinEquals(int bgroompin) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmVillPrmnt = :grmVillPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmVillPrmntEquals(String grmVillPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmPSPrmnt = :grmPSPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmPSPrmntEquals(String grmPSPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmPOPrmnt = :grmPOPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmPOPrmntEquals(String grmPOPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmDistPrmnt = :grmDistPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmDistPrmntEquals(String grmDistPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmStatePrmnt = :grmStatePrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmStatePrmntEquals(String grmStatePrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmPinPrmnt = :grmPinPrmnt'.
	 */
	public Spmarrigenotice[] findWhereGrmPinPrmntEquals(int grmPinPrmnt) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'grmLenRes = :grmLenRes'.
	 */
	public Spmarrigenotice[] findWhereGrmLenResEquals(String grmLenRes) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomage = :bgroomage'.
	 */
	public Spmarrigenotice[] findWhereBgroomageEquals(int bgroomage) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomcondi = :bgroomcondi'.
	 */
	public Spmarrigenotice[] findWhereBgroomcondiEquals(String bgroomcondi) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'bgroomoccu = :bgroomoccu'.
	 */
	public Spmarrigenotice[] findWhereBgroomoccuEquals(String bgroomoccu) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'ntfee = :ntfee'.
	 */
	public Spmarrigenotice[] findWhereNtfeeEquals(int ntfee) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'certifee = :certifee'.
	 */
	public Spmarrigenotice[] findWhereCertifeeEquals(int certifee) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'datemp = :datemp'.
	 */
	public Spmarrigenotice[] findWhereDatempEquals(Date datemp) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'district_code = :districtCode'.
	 */
	public Spmarrigenotice[] findWhereDistrictCodeEquals(String districtCode) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'sro_code = :sroCode'.
	 */
	public Spmarrigenotice[] findWhereSroCodeEquals(String sroCode) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the criteria 'sro_name = :sroName'.
	 */
	public Spmarrigenotice[] findWhereSroNameEquals(String sroName) throws SpmarrigenoticeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the spmarrigenotice table that match the specified arbitrary SQL statement
	 */
	public Spmarrigenotice[] findByDynamicSelect(String sql, Object[] sqlParams) throws SpmarrigenoticeDaoException;

	/** 
	 * Returns all rows from the spmarrigenotice table that match the specified arbitrary SQL statement
	 */
	public Spmarrigenotice[] findByDynamicWhere(String sql, Object[] sqlParams) throws SpmarrigenoticeDaoException;

}
