/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package org.nic.epanjeeyan.dao;

import org.nic.epanjeeyan.dto.*;
import org.nic.epanjeeyan.exceptions.*;

public interface NodalOfficersDao
{
	/** 
	 * Inserts a new row in the nodal_officers table.
	 */
	public NodalOfficersPk insert(NodalOfficers dto) throws NodalOfficersDaoException;

	/** 
	 * Updates a single row in the nodal_officers table.
	 */
	public void update(NodalOfficersPk pk, NodalOfficers dto) throws NodalOfficersDaoException;

	/** 
	 * Deletes a single row in the nodal_officers table.
	 */
	public void delete(NodalOfficersPk pk) throws NodalOfficersDaoException;

	/** 
	 * Returns the rows from the nodal_officers table that matches the specified primary-key value.
	 */
	public NodalOfficers findByPrimaryKey(NodalOfficersPk pk) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'officer_id = :officerId'.
	 */
	public NodalOfficers findByPrimaryKey(int officerId) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria ''.
	 */
	public NodalOfficers[] findAll() throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'officer_id = :officerId'.
	 */
	public NodalOfficers[] findWhereOfficerIdEquals(int officerId) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'office_id = :officeId'.
	 */
	public NodalOfficers[] findWhereOfficeIdEquals(int officeId) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'name = :name'.
	 */
	public NodalOfficers[] findWhereNameEquals(String name) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'userid = :userid'.
	 */
	public NodalOfficers[] findWhereUseridEquals(String userid) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'password = :password'.
	 */
	public NodalOfficers[] findWherePasswordEquals(String password) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'email = :email'.
	 */
	public NodalOfficers[] findWhereEmailEquals(String email) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the criteria 'mobile_number = :mobileNumber'.
	 */
	public NodalOfficers[] findWhereMobileNumberEquals(String mobileNumber) throws NodalOfficersDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nodal_officers table that match the specified arbitrary SQL statement
	 */
	public NodalOfficers[] findByDynamicSelect(String sql, Object[] sqlParams) throws NodalOfficersDaoException;

	/** 
	 * Returns all rows from the nodal_officers table that match the specified arbitrary SQL statement
	 */
	public NodalOfficers[] findByDynamicWhere(String sql, Object[] sqlParams) throws NodalOfficersDaoException;

}
